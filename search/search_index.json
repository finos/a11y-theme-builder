{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accessibility Theme Builder","text":"<p>Accessibility Theme Builder is a tool for generating machine readable asset types, which will allow design systems to publish products that are accessibly inclusive. This tool is based on an Atomic Accessibility Design methodology that allows designers and developers to:</p> <ul> <li>Improve Developer Experience<ul> <li>Embrace unified design systems and digital libraries.</li> <li>Remove the pain points of aligning a design library and a digital component library.</li> </ul> </li> <li>Expedite design and development.<ul> <li>Expand and improve UI component libraries.</li> </ul> </li> <li>Contribute to the Community<ul> <li>Advocate for accessible inclusion through code contributions.</li> <li>Enhancing the tool will result in more consistently accessibile products, improving risk compliance pertaining to accessibility.</li> </ul> </li> <li>Improve Market Responsiveness<ul> <li>Respond to market trends and new standards.</li> <li>Quickly utilize best practices.</li> </ul> </li> <li>Promote Diversity, Equity, and Inclusion<ul> <li>Apply inclusive design principals.</li> <li>Collaborate on innovations for persons with disabilities.</li> </ul> </li> </ul>"},{"location":"_videos/video-links/","title":"Video Recording Links and Resources","text":""},{"location":"_videos/video-links/#conference-talks","title":"Conference Talks","text":"<ul> <li>Event: State of OpenCon 24</li> <li>Location: London, UK</li> <li>A11y Theme Builder Speakers: Lise Nobel, Cody Zuchlag (Track host, Paula Paul)</li> <li>Talk: Inclusive by Design: Revolutionizing Accessibility</li> <li>Recording Link</li> <li>Comments:</li> </ul>"},{"location":"_videos/video-links/#demos","title":"Demos","text":""},{"location":"_videos/video-links/#community-calls","title":"Community Calls","text":""},{"location":"architecture/","title":"Under the Hood","text":"<p>This section describes the details of the Theme Builder tool and covers both the SDK and the application. - The SDK can be used independently to create accessibility-complient themes. - The web application adds a user interface to the SDK which allows the user to easily create and view accessibility-compliant themes.</p>"},{"location":"architecture/app-api/","title":"Understanding Application APIs","text":"<p>The Theme Builder server serves the React application at the <code>/</code> endpoint.</p> <p>The APIs are under the <code>/api/</code> endpoint, with the following apis available:</p>"},{"location":"architecture/app-api/#apithemesmetadata-get-list-of-all-themes-or-metadata-for-all-themes","title":"/api/themes?metadata - Get list of all themes or metadata for all themes","text":"<ul> <li>Method: GET</li> <li>Returns: Array of theme names</li> <li>Return Errors: None</li> <li>Example: GET /api/themes =&gt; [ \"theme1\", \"theme2\" ]</li> <li>Example: GET /api/themes?metadata =&gt; [ {id:\"theme1\", metadata:{..}}, {id:\"theme2\", metadata: {..}} ]</li> </ul>"},{"location":"architecture/app-api/#apithemes-create-a-new-theme","title":"/api/themes - Create a new theme","text":"<ul> <li>Method: POST</li> <li>Body: Theme object</li> <li>Returns: Theme object</li> <li>Return Errors: 500, 501 invalid document, 502 document already exists</li> <li>Example: POST /api/themes { id:\"theme3\", key1:themeData} =&gt; { id:\"theme3\", key1:themeData}</li> </ul>"},{"location":"architecture/app-api/#apithemes-delete-all-themes-this-deletes-the-database-so-use-with-caution","title":"/api/themes - Delete all themes (This deletes the database, so use with caution)","text":"<ul> <li>Method: DELETE</li> <li>Returns: returns boolean (true=success, false=fail)</li> <li>Return Errors: none</li> <li>Example: DELETE /api/themes =&gt; true</li> </ul>"},{"location":"architecture/app-api/#apithemesid-get-a-theme-and-return-all-fields","title":"/api/themes/:id - Get a theme and return all fields","text":"<ul> <li>Method: GET</li> <li>Returns: Theme object</li> <li>Return Errors: 404 document :id was not found, 500</li> <li>Example: GET /api/themes/theme5 =&gt; { id:\"theme5\", key1:themeData}</li> </ul>"},{"location":"architecture/app-api/#apithemesidfieldsfield1field2-get-a-theme-and-return-only-specified-fields","title":"/api/themes/:id?fields=field1,field2,... - Get a theme and return only specified fields","text":"<ul> <li>Method: GET</li> <li>Returns: Partial theme object</li> <li>Return Errors: 404 document :id was not found, 500</li> <li>Example: GET /api/themes/theme5?field=key1 =&gt; {key1:themeData}</li> </ul>"},{"location":"architecture/app-api/#apithemesidreturndoctrue-update-a-theme-or-fields-of-a-theme","title":"/api/themes/:id?returnDoc=true - Update a theme or fields of a theme","text":"<ul> <li>Method: PUT</li> <li>Body: Theme object or {?set: Partial theme object}</li> <li>Returns: If returnDoc, then return Theme object, else return true</li> <li>Return Errors: 404 document :id was not found, 500</li> <li>Example: PUT /api/themes/theme5 {key2:{subkey1: updatedSubData1}} =&gt; true</li> <li>Example: PUT /api/themes/theme5?returnDoc=true {key2:{subkey1: updatedSubData1}} =&gt; {id:\"theme5\", key2:{subkey1: updatedSubData1}</li> <li>Example: PUT /api/themes/theme5?returnDoc=true {?set: {\"key2.subkey1\": updatedSubData1}}} =&gt; {id:\"theme5\", key1:themeData, key2:{subkey1: updatedSubData1}</li> </ul>"},{"location":"architecture/app-api/#apithemesid-delete-a-theme","title":"/api/themes/:id - Delete a theme","text":"<ul> <li>Method: DELETE</li> <li>Returns: Theme object</li> <li>Return Errors: 404 document :id was not found, 500</li> <li>Example: DELETE /api/themes/theme5 =&gt; { id:\"theme5\", key1:themeData}</li> </ul>"},{"location":"architecture/base-services/","title":"Foundational Services","text":""},{"location":"architecture/base-services/#concepts","title":"Concepts","text":"<p>The following concepts are used in computations.</p> <ul> <li>on-color: Google Material Design refers to the color elements that appear \u201con\u201d top of surfaces that use the following colors: a primary color, secondary color, surface color, background color, or error color, as \"on\" colors. When a color appears \u201con\u201d top of a primary color, it\u2019s called an \u201con primary color.\u201d They are labelled using the original color category (such as primary color) with the prefix \u201con\u201d. These \u201cOn\u201d colors are primarily applied to text, iconography, and strokes.</li> </ul>"},{"location":"architecture/base-services/#computational-instructions","title":"Computational Instructions","text":""},{"location":"architecture/base-services/#light-and-dark-mode-shades","title":"Light and Dark Mode Shades","text":"<ol> <li> <p>For a selected color, identify the color's LIGHTNESS_VALUE with respect to a scale from 0-1 to associate it with a SHADE_LEVEL. To compute the LIGHTNESS_VALUE, convert the ordinal HEX color to RGB and then RGB to HSL (Hue, Saturation, Lightness).</p> Shade Level Lightness Value Range 0 .9 to 1 100 .8 to .9 200 .7 to .8 300 .6 or .7 400 .5 to .6 500 .4 to .5 600 .3 to .4 700 .2 tp .3 800 .1 to .2 900 0 to .1 </li> <li> <p>For light mode shade adjustments, compute LIGHT_MODE_LIGHTNESS per SHADE_LEVEL. First compute the MULTIPLIER for calculating all the lightness per shades levels.     <pre><code>MULTIPLIER = LIGHTNESS_VALUE - (900 - SHADE_LEVEL)/1000\nFor 0 to 900 by 100:\n  LIGHT_MODE_LIGHTNESS = ((900 - SHADE_LEVEL) + MULTIPLIER)/1000\n</code></pre>     If the LIGHTNESS_VALUE is &gt;= .97 then the LIGHTNESS_VALUE is .97 and if the LIGHTNESS_VALUE is darker than .05 then the DARKNESS_VALUE is .05.  This prevents the lightest color from becoming too white and the dark color from becoming too dark.</p> </li> <li> <p>Dark mode shade adjustments are computed by decreasing the lightness. This means the light shades are reduced more than the dark shades.</p> <pre><code>  REDUCTION_VALUE = (900-SHADE_VALUE)/1000\n  For 0 to 900 by 100:\n    DARK_MODE_LIGHTNESS = (((900 - SHADE_VALUE)/1000) - (.075 * REDUCTION_VALUE )\n</code></pre> </li> <li> <p>Calculate each color by taking the original HSL value, updating each shade with the new calculated lightness value, and then convert the color from HSL back to RGB.</p> </li> <li>Check the swatch and its color contrast against light and dark text to see which has a higher contrast.<ul> <li>In light mode dark text is \"#121212\" and light text is \"#ffffff\"</li> <li>In dark mode dark text is \"#121212\" and light text is \"rgba(255,255,255,0.6)\"</li> </ul> </li> <li>Check with resulting color and text color combination to calculate its contrast ratio.  If it has a contrast ratio of 4.5:1 or higher compute the swatch with the corresponding text or 'On-Color'.</li> <li>If the contrast is &lt; 4.5:1, test to see if it takes more cycles to lighten the color with dark text or darken the color with light text to get to the desired contrast ratio of 4.5:1.</li> <li>Loop through a function to lighten or darken the shade until it has an on-color with a contrast ratio of 4.5:1.</li> <li>Smooth out the transitions through the colors so there are no obvious jumps by identifying those colors that have been lightened or darkened, and placing the corresponding shade along a gradient to the lightest and darkest shades and updating the shades in-between at equal percentage intervals.</li> </ol>"},{"location":"architecture/base-services/#gradients","title":"Gradients","text":"<ul> <li> <p>Light Mode Color Selection</p> <ol> <li>Once the user selects the primary, secondary, and tertiary colors of a theme, a menu will be generated for the user to select the first color, color \"a\", of a gradient, from the shades generated for the primary, secondary, and tertiary colors.</li> <li>Once the \"a\" color is selected only those colors of the primary, secondary and tertiary shades with the same \"on-color\" as \"a\" can be selected by the user for color \"b\".</li> <li>Any text or icon used on the full gradient will now meet the required 4.5:1 contrast.</li> </ol> </li> <li> <p>Dark Mode Color Selection</p> <ol> <li>If color \"a\" and \"b\" are the same color and shade 500 or higher, identify dark \"on-colors\" and proceed to map the same jump in shade values as the user picked in light mode.</li> <li>If there are not 2 or more dark \"on-color\" shades, then look at all of the light \"on-color\" shades to build a gradient with the same jump in shades.</li> <li>This yields gradients in dark mode that are not too bright or light for the eyes and \"a\" and \"b\" shades that have the same \"on-color,\" keeping it accessible.</li> </ol> </li> </ul>"},{"location":"architecture/base-services/#icons-and-buttons","title":"Icons and Buttons","text":"<ol> <li>User selects values for the following preferences.  These are required in order to specify icon and button colors in the default color theme.<ol> <li>Primary, secondary, and tertiary colors</li> <li>Light mode background colors</li> <li>Dark mode background colors</li> </ol> </li> <li>Build light mode accessible buttons<ol> <li>Limit the selection of button colors to those primary, secondary, and tertiary shades that have a contrast against the secondary light mode background color of 3.1:1 or higher.  Note secondary background needs to be slightly darker than the primary background.</li> </ol> </li> <li>Build dark mode accessible buttons<ol> <li>Start with the users selected light mode button shade and test it against their selected primary dark mode background color selection, which is slightly darker than the secondary background color.</li> <li>If the button does not have the required contrast, then loop through the lighter shades until finding an appropriate shade.</li> </ol> </li> <li>Repeat steps 2-3 for icon color.</li> </ol>"},{"location":"architecture/base-services/#elevations","title":"Elevations","text":"<ul> <li>In light mode elevations are represented with increasing dropshadows.<ul> <li>To calculate the elevations, gather information from the user about the base dropshadow.<ul> <li>color of the shadow</li> <li>horizontal distance</li> <li>vertical distance</li> <li>blur</li> <li>spread</li> </ul> </li> <li>User specifies desired change between elevations.</li> <li>Compute 10 elevations, consistently increasing dropshadow styles to represent the 10  elevations in light mode.</li> </ul> </li> <li>In dark mode, instead of elevations being represented by increasing dropshadows as they are in light mode, elevations are represented by increasing lightness.<ul> <li>Use the background color which serves as the elevation 0 shade and apply an increasing white overlay on the background color to generate 10 elevations.</li> <li>Leverage the Material Design elevation calculations to determine the  appropriate lightness.</li> </ul> </li> </ul>"},{"location":"architecture/base-services/#minimum-click-area-control","title":"Minimum Click Area Control","text":"<p>Note: WCAG 2.1 AA requires desktop applications to have a target click area of 24px.</p> <p>The user can select the desired MINIMUM_CLICK_AREA for their desktop application.</p> <ul> <li>By default the MINIMUM_CLICK_AREA will change to 44px for tablet and mobile interfaces.</li> </ul> <p>It is possible to create clickable elements that meet the MINIMUM_CLICK_AREA selected but appear smaller:</p> <ol> <li>Wrap the component in a parent that is, in fact, the identified MINIMUM_CLICK_AREA but then make the visual elements of the wrapped component smaller (e.g. 24px).</li> <li>Although a user sees a button that looks 24 pixels high - it's click area is, in fact, set to the minimum click area due to the size of its parent.  This feature allows the design to create visually smaller elements that are less overwhelming in an interface while meeting accessibility guidelines.</li> </ol>"},{"location":"architecture/base-services/#color-themes","title":"Color Themes","text":"<p>Color themes can be applied to a system to change the coloring of elements only.</p> <p>The user can specify the primary, secondary and tertiary colors, the light and dark mode backgrounds, gradients, buttons, icons, and text gradient colors.</p> <p>As a result, a dark and light mode are generated for each color theme and all the calculations are made to transform the interface accordingly.</p> <p>In addition to making the required color changes to reduce eye strain while maintaining the required contrast levels, adjust the brightness of images by adding on a desaturation layer (a black layer with an opacity of 5%) over the image.</p>"},{"location":"architecture/base-services/#focus-state","title":"Focus state","text":"<p>Buttons and other clickable interface items are required to demonstrate a visual change when focused, with a color change conrasting 3.1:1 or more compared to its original color.</p> <p>For each element, provide a focus state with the required contrast.</p> <p>Let the user specify the default browser settings designed for focus states or the identified button color for focus states for interfaces with white/off-white or nearblack/off-black backgrounds in light mode and nearblack/off-black backgrounds in dark mode.</p> <p>Overwrite these default settings if the user selected a colored background in light or dark mode.  In such a case, use the selected button color for hotlinks and focus states - which provides the contrast on-color.</p>"},{"location":"architecture/base-services/#hotlinks","title":"Hotlinks","text":"<p>To meet standards compliance, hotlinks need to have a contrast of 4.5:1 against the background. In addition, hotlinks need to have a contrast of 3.1:1 against the text surrounding it.  If it does not meet these two conditions, then it has to be underlined so that it can be easily distinguished in its position on the page.  These rules exist for hotlinks whether they are in light mode or dark mode.</p> <p>The links also need to change when hovered and have a visual distinguishing effect, other than the color change, on focus.  As an example of compliant behavior, if a hotlink is underlined (due to user preference or lack of contrast) then the hotlink would NOT be underlined while it is being hovered or has focus.</p> <p>Allow the user to pick the default settings or apply link coloring that compliments their theme.  They can choose, if they want, whether the hotlink will be underlined by default or not.  In dark mode, if we cannot find a color that satisfies both criteria (the background contrast as well as the surrounding text contrast), we will underline the hotlink to ensure compliance.</p> <p>Note: If the hotlinks are NOT underlined by default, then on hover and focus they will become underlined.  If they are underlined by default, the underline is removed on hover and focus to meet the visual change requirement.</p>"},{"location":"architecture/base-services/#bevels-and-reverse-bevels","title":"Bevels and Reverse Bevels","text":"<p>A bevel effect adds 3D depth to a graphic or text object by making a light shadow on the top and left side of the target and a dark shadow on the right and bottoms sides of the target.</p> <p>An inverse bevel applies a dark shadow to the top and right side of a shape, making it look three dimensionally recessed.</p> <ol> <li>Collect the following values<ul> <li>horizontal distance</li> <li>vertical distance</li> <li>blur</li> <li>spread</li> <li>opacity level of the dark shadow</li> <li>opacity level of the light shadow</li> </ul> </li> <li>Generate 10 bevels and 10 recessed bevels that consistently scale.</li> </ol>"},{"location":"architecture/component-model/","title":"Component Model","text":"<p>The Accessibility Theme Builder application is has two main components:</p> <ul> <li> <p>the SDK (written in Typescript) which performs calculations and generates code (e.g. CSS, JSON) for your theme;</p> </li> <li> <p>a user-friendly, React-based application which not only makes it easy to use the SDK, but also displays a visual representation for the atoms, molecules, and organisms so that you can see your theme real-time.</p> </li> </ul> <p>The following diagram shows the overall architecture.</p> <p></p> <p>On the left, the browser visits the server application.  This application is a node application which is written in Typescript and uses Express.  This application provides a simple API which is used to persist the user's themes.  This persistence API manages storage which is written to each time the user clicks the button to save a theme and read from each time the user loads a theme or switches to another one.</p> <p>On the right is the client which runs inside the browser as a React-based SPA (Single Page Application).  This application uses the popular MUI React component library to render the user interface components and the SDK to manage themes, atoms, molecules, and organisms and to perform code generation (CSS and JSON).</p>"},{"location":"architecture/sdk-intro/","title":"Understanding the SDK","text":"<p>The SDK provides APIs which make it easy to generate accessible themes.</p> <p>In particular, the SDK provides the following:</p> <ul> <li>APIs for creating, modifying, and deleting themes;</li> <li>calculations that are necessary to ensure that accessibility requirements are met;</li> <li>a pluggable persistence interface;</li> <li>code generation for CSS and JSON (Figma-compliant); and</li> <li>extensibility with regard to atoms, molecules, organisms, and accessibility layers.</li> </ul>"},{"location":"architecture/sdk-intro/#sdk-tutorial","title":"SDK Tutorial","text":"<p>The best way to learn how to use the SDK APIs directly is to use the SDK Tutorial.  This tutorial provides specific examples of how to use the APIs for the most common tasks, in the order in which you will typically perform these tasks.</p>"},{"location":"architecture/sdk-intro/#sdk-reference-api-documentation","title":"SDK Reference API documentation","text":"<p>In addition, for more detailed information, you may visit the online SDK API docs which are generated using TypeDoc and provide reference documentation for each of the APIs provided by the SDK.</p>"},{"location":"contribute/","title":"Index","text":""},{"location":"contribute/#call-for-contributions","title":"Call for Contributions","text":"<p>As an incubation project, FINOS seeks community input on where this project can be enhanced and/or put-into-use. This document serves as a compendium of suggestions pertaining to possible:</p> <ul> <li>feature enhancements</li> <li>applicable use cases</li> <li>workflow integrations</li> </ul> <p>If you have a suggestion to share, please submit a ticket to help capture and track your suggestion. We recommend to also submit a <code>pull-request</code> against this documentation section so that your ideas can be included in the project documentation. </p>"},{"location":"contribute/#feature-enhancements","title":"Feature Enhancements","text":"<p>Share an idea for how Theme Builder could be improved.  Explore and/or augment this list of enhancement ideas. Please use an existing or new ticket to expand on a specific feature. </p> Feature Name Description Suggestion Ticket A11y Layers (Overlays) Create and add new overlays. 456 New Atomic Elements Extending Atomic components of the existing system. Create and add new atoms, molecule, or organism. 455 Default Test App Write a node-based web application that utilizes the output (generated CSS and/or JSON theme files) of Theme Builder. This could be applied to printing services, ATM\u2019s, payment devices, etc. 454 Styling Preview Render within the Theme Builder interface a preview of how the chosen colors and styles would be applied to each atomic element. 453 Design Starter Files Create Theme Builder component starter files in Adobe XD and Sketch formats based on the Figma Starter File. 452 Alternate Output Formats Enable the ThemeBuilder to generate outputs suitable for mobile or desktop environments such as Xcode. 451 Sub-themes Allow for the creation of sub-themes associated with or building off of a parent theme. For instance, allow a sub-theme to be created for an intranet that is based off an organizations public website theme. 450 Lockable Attributes The ability for theming attributes within a parent theme to be locked so that sub-themes based on the parent theme retain the parent styling for the locked attributes. This is beneficial for keeping sub-themes on-brand. 449 Updatable Theme Colors Provide the ability for users of the Theme Builder to modify the selected primary, secondary, and tertiary colors after being initially set. 448 Translation Layer Enable dyslexia support to be applied to fonts in languages other than English. 446"},{"location":"contribute/#use-cases","title":"Use Cases","text":"<p>Share an idea for how Theme Builder can be used. We are interested in all possible use cases (not limited to the Finance Sector). Are you interested in building a prototype for a use case? Explore and/or augment this list of use cases. Please use an existing or new ticket(https://github.com/finos/a11y-theme-builder/issues) to expand on a specific use case. </p> Feature Name Description Suggestion Ticket Design System Rebranding Utilize the Theme Builder to expedite the rebranding of an application. 459 Customized Consumer Instruments Customized credit cards or mail based on a user\u2019s preferences (for example: if a user noted that they were colorblind, the Theme Builder tool could be utilized to automatically change the colors &amp; contrast values of their credit card when it was printed). 461 Command Line Interface A CLI could be used in a CI/CD process to automate any of the following: (1) transformation: automatically building/deploying multiple versions of a single app with different accessibility features enabled.(2) verification: verify that the checked in design system meets the min level of the source control merging standards; (3) output generation: automatically generate the outputs (CSS, JSON, PPT, etc) from a hosted design system. 462 Design System Accessibility Assessment Verify if existing theme is a11y compliant via uploading for assessment. Metadata included to advise on standard development of a11y compliant solutions as part of results. 460 User Profile Specific Variations Store user preferences to provide on-demand, profile-aware themes and experience variations across digital and physical channels that address a user's specific accessibility needs. 458 White-labeled Themes Leverage the Theme Builder to create accessible sub-themes for third-party applications such as Workday and design systems such as IBM Carbon. 457"},{"location":"contribute/#workflow-integrations","title":"Workflow Integrations","text":"<p>Do you have an idea for how Theme Builder can be used in the workflow activities between accessibility designers, developers, and testers? Are you interested in doing a proof-of-concept for a end-to-end integration? Explore and/or augment this list of ideas. Please use an existing or new ticket to expand on a specific concept. </p> Concept Description Suggestion Ticket Low-code Environment Integration using airplane.dev Imagine a simple, easy to use toolchain workflow whereby Theme Builder provides the accessibly aware CSS that can be consumed by a low-code developer environment. 214 Dynamic Github A11y Create your personalized A11y Theme and connect it to a Github account for a personalized experience. 312 Theme Switcher Utilize Theme Builder to switch between themes for a given interface. Examples include upgrading a design system theme from WCAG AA to AAA. 465 Compliance Testing Test prototypes &amp; solutions developed utilizing Fable testing tool. This would include adding a sample app that can be used for applying themes and then testing for verifying compliance. 466 Restaurant Menu Generator Integrate Theme Builder into menu creation at restaurants. Once a user scans the QR code for a menu, they would be able to switch to different themes of the menu, depending on their disability. 468 Nodejs Alternatives Implement atomic components in another Javascript language/framework 470 React Components Build React (or other framework) components that can consume Theme Builder output. 469 Synchronization with Storybook Published outputs from the ThemeBuilder are consumed by and therefore synchronized with a digital component library rendered in Storybook. 464 DesignOps Toolchain Prepare a demo and documentation for setting up the toolchain workflow for keeping the Design Component Library, the Digital Component Library and the CSS Library in sync. See DesignOps Toolchain for more details. 463"},{"location":"decisions/","title":"Decisions","text":"<p>As a community, we will capture all <code>Business</code> and <code>Architectural</code> decisions in the repo folder using a derivative of an Architecture Decision Record (ADR) Template.</p>"},{"location":"decisions/#adr-naming-convention","title":"ADR Naming Convention","text":"<ol> <li>Prefix: <code>Name</code></li> <li>Suffix: </li> <li>Architecture Decision:<code>_adr</code></li> <li>Business Decision:<code>_bdr</code></li> <li>File Extension: <code>.md</code></li> </ol> <p>Examples:</p> <ul> <li><code>PY-KERI_for_SCIDs_adr.md</code></li> <li><code>Witness_as_a_Service_bdr.md</code></li> </ul>"},{"location":"decisions/adr_template/","title":"[short title of solved problem and solution]","text":"<ul> <li>Status: [proposed | rejected | accepted | deprecated ] </li> <li>Deciders: [list everyone involved in the decision] </li> <li>Date: [YYYY-MM-DD when the decision was last updated] </li> </ul> <p>Technical Story: [description | ticket/issue URL] </p>"},{"location":"decisions/adr_template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>[Describe the context and problem statement, e.g., in free form using two to three sentences. You may want to articulate the problem in form of a question.]</p>"},{"location":"decisions/adr_template/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>[driver 1, e.g., a force, facing concern, \u2026]</li> <li>[driver 2, e.g., a force, facing concern, \u2026]</li> <li>\u2026 </li> </ul>"},{"location":"decisions/adr_template/#considered-options","title":"Considered Options","text":"<ul> <li>[option 1]</li> <li>[option 2]</li> <li>[option 3]</li> <li>\u2026 </li> </ul>"},{"location":"decisions/adr_template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"[option 1]\", because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | \u2026 | comes out best (see below)].</p>"},{"location":"decisions/adr_template/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>[e.g., improvement of quality attribute satisfaction, follow-up decisions required, \u2026]</li> <li>\u2026</li> </ul>"},{"location":"decisions/adr_template/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>[e.g., compromising quality attribute, follow-up decisions required, \u2026]</li> <li>\u2026</li> </ul>"},{"location":"decisions/adr_template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"decisions/adr_template/#option-1","title":"[option 1]","text":"<p>[example | description | pointer to more information | \u2026] </p> <ul> <li>Good, because [argument a]</li> <li>Good, because [argument b]</li> <li>Bad, because [argument c]</li> <li>\u2026 </li> </ul>"},{"location":"decisions/adr_template/#option-2","title":"[option 2]","text":"<p>[example | description | pointer to more information | \u2026] </p> <ul> <li>Good, because [argument a]</li> <li>Good, because [argument b]</li> <li>Bad, because [argument c]</li> <li>\u2026 </li> </ul>"},{"location":"decisions/adr_template/#option-3","title":"[option 3]","text":"<p>[example | description | pointer to more information | \u2026] </p> <ul> <li>Good, because [argument a]</li> <li>Good, because [argument b]</li> <li>Bad, because [argument c]</li> <li>\u2026 </li> </ul>"},{"location":"decisions/adr_template/#links","title":"Links","text":"<ul> <li>[Link type] [Link to ADR] </li> <li>\u2026 </li> </ul>"},{"location":"decisions/mui_adr/","title":"Decision to use React.js and Material UI","text":"<ul> <li>Status: Accepted </li> <li>Deciders: Bryce Curtis, Aaron Reed, Evan Countouris, Dan Gisolfi </li> <li>Date: 2023-02-03 </li> </ul>"},{"location":"decisions/mui_adr/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>There are several component libraries that can be used to write a web application.  The initial limited-function POC was written as a single page app using jQuery.  Since a complete redesign of the app was needed to turn it into an MVP, several Javascript frameworks and component libraries were considered. </p>"},{"location":"decisions/mui_adr/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>Component-based architecture</li> <li>Open source</li> <li>Community support</li> <li>Usage in Discover</li> </ul>"},{"location":"decisions/mui_adr/#considered-options","title":"Considered Options","text":"<ul> <li>jQuery</li> <li>React.js with Material UI</li> <li>Angular</li> </ul>"},{"location":"decisions/mui_adr/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"React.js\", because it is a component-based architecture, it supports typescript, it is open source with a large and active community, and it is widely used in Discover.</p> <p>Chosen option: \"Material UI\".  Once React.js was chosen, the next decision was which component library to use.  The overriding factor for choosing Material UI was because it is widely used by Discover.  It also supports typescript, and it is open source with a large and active community.</p> <p>Note: The relevance of each of these technologies to Discover was an important consideration because the initial code was written by Discover, who had great trust and high regard for these technologies as well as much experience developing in such an environment.</p>"},{"location":"decisions/mui_adr/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":"<p>The most common web frameworks and technologies used in 2022 are listed on StackOverflow.</p> <p>All respondents:</p> <ul> <li>43% use React.js</li> <li>29% use jQuery</li> <li>20% use Angular</li> </ul>"},{"location":"decisions/mui_adr/#jquery","title":"jQuery","text":"<p>https://jquery.com/ </p> <ul> <li>Good, because it is lightweight and simple</li> <li>Good, because it has cross-browser support</li> <li>Bad, because it is not component-based</li> </ul>"},{"location":"decisions/mui_adr/#reactjs-with-material-ui","title":"React.js with Material UI","text":"<p>https://react.dev/</p> <ul> <li>Good, because it is component-based</li> <li>Good, because it supports typescript</li> <li>Good, because it is widely used by Discover</li> <li>Good, because it is open source</li> <li>Good, because it has active community support</li> </ul> <p>https://mui.com/</p> <ul> <li>Good, because it supports typescript</li> <li>Good, because Material UI component library is widely used by Discover</li> <li>Good, because it is open source</li> <li>Good, because it has active community support</li> </ul>"},{"location":"decisions/mui_adr/#angular","title":"Angular","text":"<p>https://angularjs.org/</p> <ul> <li>Good, because it is component-based</li> <li>Good, because it supports typescript</li> <li>Good, because it is open source</li> <li>Good, because it has active community support</li> <li>Bad, because it is not used by Discover</li> </ul>"},{"location":"decisions/mui_adr/#links","title":"Links","text":"<ul> <li>The Top React Component Libraries that are Worth Trying (Jan 2023)</li> </ul>"},{"location":"designers/","title":"Designers and Theme Builder","text":"<p>Designers are here at the beginning of the Theme Builder story and will continue to be the catalysts behind most of the projects that will eventually benefit from Theme Builder's capabilities.  Designers create and enhance the designs that will ultimately shape how users will experience web and mobile applications.  In order to prepare, designers already collaborate with business leaders, product owners, architects, developers, and many others to build a vision for the application that will guide their designs.  Theme Builder, like many other comparable design tools, can help designers realize their visions.  But Theme Builder's unique strength lies in its ability to ensure that the design system that is ultimately defined by its author will meet widely accepted accessibility guidelines.</p> <p>The following sections will describe how designers can leverage key features in Theme Builder to allow their application to be consumed by the widest possible audience of end users.</p>"},{"location":"designers/Understanding-Design-Concepts-Used/","title":"Understanding Design Concepts Used In A11Y Theme Builder","text":"<p>Design tokens are named variables that store design decisions like colors, fonts, spacing, border styles, and more. Think of them as reusable building blocks for your visual interface. Built on Brad Frost's Atomic Design, A11y Theme Builder generates each design system in JSON, containing design tokens categorized in the appropriate atomic design elements. Theme Builder also generates each design system in CSS.</p>"},{"location":"designers/Understanding-Design-Concepts-Used/#atomic-design","title":"Atomic Design","text":"<p>Atomic Design offers a structured approach to building user interfaces by breaking them down into their smallest, reusable components. This promotes consistency, scalability, and improves collaboration between designers and developers.</p>"},{"location":"designers/Understanding-Design-Concepts-Used/#atoms","title":"Atoms","text":"<p>Atoms are the fundamental building blocks of this design system. They represent the most basic visual elements that can't be further broken down. Here's a breakdown of the atoms defined by Theme Builder:</p> <ul> <li> <p>Color Palette:</p> <ul> <li>Theme Colors: The core set of colors representing your brand identity (e.g., primary, secondary, accent).</li> <li>Sub-themes: Variations on your core theme colors (e.g., dark theme, light theme palettes).</li> </ul> </li> <li> <p>Typography:</p> <ul> <li>Font Families: Define the base fonts used throughout your interface.</li> <li> <p>Style Settings:</p> <ul> <li>Display Styles: High-impact text styles for headings (e.g., H1, H2, etc.).</li> <li>Header Styles: Bold and clear styles for headers within sections.</li> <li>Body Text Styles: The primary font styles for paragraphs and regular text.</li> <li>Stat Styles: Specific styles for presenting data (e.g., numbers, percentages).</li> </ul> </li> </ul> </li> <li> <p>Shadow Atoms:</p> <ul> <li>Elevation: Define elevation levels to create a sense of depth and hierarchy between elements (e.g., drop shadows, card shadows).</li> <li>Bevel: Control how an element's edges are styled (e.g., soft bevels for buttons).</li> <li>Inner Shadow: Add depth within an element using inner shadows.</li> <li>Outer Glow: Create an outer glow effect around elements.</li> </ul> </li> <li> <p>Other Atoms:</p> <ul> <li>Grid System: Define your layout grid for consistent spacing and responsive design.</li> <li>Target States: Visual styles for interactive elements like buttons (e.g., hover, focus states).</li> <li>Chart Colors: Color palettes specifically designed for data visualizations.</li> <li>Border Settings: Establish border styles (e.g., thickness, color) for various use cases.</li> <li>Hotlink Styles: Visual indicators for hyperlinks (e.g., underline, color).</li> <li>Input Background: Styles for input fields and textareas.</li> <li> <p>Animation Settings: Define animation properties for dynamic transitions and micro-interactions.</p> </li> <li> <p>Find complete list of properties here - https://finos.github.io/a11y-theme-builder-sdk/classes/Atom.html</p> </li> </ul> </li> </ul>"},{"location":"designers/Understanding-Design-Concepts-Used/#molecules","title":"Molecules","text":"<p>Molecules are combinations of atoms that create simple, functional units. They represent slightly more complex structures within your design system, providing a bridge between basic visual elements (atoms) and more complex components (organisms)</p> <ul> <li> <p>General Desktop</p> <p>The General Desktop category includes various interactive and static elements commonly used in desktop applications.  -   Avatars: Visual representations of users or entities, typically circular images or icons. -   Buttons: -   Standard Buttons: Default interactive buttons used for various actions. -   Small Buttons: Smaller variants of standard buttons for less prominent actions. -   Cards: Container elements that group related information together, often with a shadow and border. -   Chips: Small, interactive elements used for input, filters, or selections. -   Dropdowns: Expandable lists for selecting one option from multiple choices. -   Images: Static visual elements used to display pictures or graphics. -   Modals: Overlay windows that display content without leaving the current page. -   Spacing: Elements that define consistent spacing between components. -   Popovers: Small overlays that display additional information when an element is hovered or clicked. -   Sliders: Interactive controls for selecting values within a range. -   Toasts: Small notifications that provide feedback to the user.</p> </li> </ul>"},{"location":"designers/Understanding-Design-Concepts-Used/#charts","title":"Charts","text":"<p>The Charts category includes various types of data visualizations.</p> <ul> <li>Donut Charts: Circular charts that represent data as segments of a donut.</li> <li>Pie Charts: Circular charts that represent data as slices of a pie.</li> <li>Bar Charts: Charts that use rectangular bars to represent data values.</li> <li>Line Charts: Charts that use lines to connect data points and show trends over time.</li> <li> <p>Progress Bars: Visual indicators that show the completion status of a task or process.</p> <ul> <li>Find complete list of properties here -     - https://finos.github.io/a11y-theme-builder-sdk/classes/Molecules.html</li> </ul> </li> </ul> <p>##  Organisms</p> <p>Organisms are more complex components composed of multiple molecules. They form distinct sections of the user interface, integrating various atoms and molecules to create cohesive and functional elements.</p>"},{"location":"designers/Understanding-Design-Concepts-Used/#text","title":"Text","text":"<p>Organisms that focus on textual content and its presentation.  </p>"},{"location":"designers/Understanding-Design-Concepts-Used/#images","title":"Images","text":"<p>Organisms that involve images and their presentation.</p>"},{"location":"designers/Understanding-Design-Concepts-Used/#videos","title":"Videos","text":"<p>Organisms for presenting video content.</p>"},{"location":"designers/Understanding-Design-Concepts-Used/#lists","title":"Lists","text":"<p>Organisms that involve lists of items:</p> <ul> <li>Center-Aligned Lists: Lists with items centered within the container.</li> <li>List with Image Left: Lists where each item includes an image aligned to the left.</li> <li>Standard Lists: Vertical or horizontal lists of items.</li> </ul>"},{"location":"designers/Understanding-Design-Concepts-Used/#cards","title":"Cards","text":"<p>Organisms composed of multiple card molecules:</p> <ul> <li>Card Grids: Collections of cards displayed in a grid layout.</li> <li>Card with Header, Content, and Footer: Cards structured with distinct header, content, and footer sections.</li> </ul>"},{"location":"designers/Understanding-Design-Concepts-Used/#other-complex-components","title":"Other Complex Components","text":"<p>More complex organisms that combine various elements:</p> <ol> <li> <p>Hero Section:</p> <ul> <li>A prominent section at the top of a page, often featuring a large background image, heading, subheading, and call-to-action buttons.</li> <li> <p>Footer:</p> </li> <li> <p>The bottom section of a page, typically containing navigation links, contact information, and social media icons.</p> </li> <li> <p>Teams Section:</p> </li> <li> <p>A section showcasing team members with their photos, names, and roles.</p> </li> <li> <p>Feature Highlights:</p> </li> <li> <p>Sections highlighting key features or benefits, often using icons, headings, and descriptive text.</p> </li> <li> <p>Testimonial Section:</p> </li> <li> <p>A section featuring customer testimonials, typically including quotes, customer names, and photos.    </p> </li> </ul> </li> </ol> <p>Find complete list of properties here - https://finos.github.io/a11y-theme-builder-sdk/classes/Organism.html</p>"},{"location":"designers/how-to-configure-fonts/","title":"How to configure fonts","text":"<p>Typography pertains to the uniqueness of different styles of text that, when combined, create distinct appearances in both physical and digital material. When using Theme Builder, a Designer can configure a collection of five different Typography Atoms.</p> <p>The first is <code>Fonts Settings</code> which governs the more general settings for all text. This is followed by <code>Display &amp; Header Styles</code>, <code>Body Styles</code>, <code>Small Text Styles</code>, and <code>Stat Styles</code>, all of which set the properties for different classes of texts individually. This guide will cover each of these atoms and the range of settings they contain.</p>"},{"location":"designers/how-to-configure-fonts/#fonts-settings","title":"Fonts Settings","text":"<p>This atom allows you to set the primary and secondary font, the base font size, base font weights and line heights. As the user changes these settings, they should expect the text on the same page to change accordingly.</p>"},{"location":"designers/how-to-configure-fonts/#primary-and-secondary-fonts","title":"Primary and Secondary Fonts","text":"<p>The user can enter any text into either of these fields. We have kept a list of 100 or so common Google fonts. If we recognize the entry as one of these, we will display a message below informing the user of the weights the font supports. Alternatively, if we do not recognize the font, the message below will change to indicate this. We allow the user to set any font they want, but it is left up to the user to ensure the values work downstream.</p>"},{"location":"designers/how-to-configure-fonts/#font-sizes","title":"Font Sizes","text":"<p>This value can be set to configure the base font. The default unit is pixels. This value is used as a starting point for many typography calculations.</p>"},{"location":"designers/how-to-configure-fonts/#primary-font-weights","title":"Primary Font Weights","text":"<p>This section defines five font weights in increasing order to be used in the theme. We allow the user to enter any weights they wish, making them responsible for whether the weights can actually be used for their purposes. If the user had selected a font in our database, we will alert the user if the weight selected is not supported.</p>"},{"location":"designers/how-to-configure-fonts/#line-heights","title":"Line Heights","text":"<p>Here, the user can define three sets of line heights, for body, headers and small texts. <code>Standard Line Height</code>, sets the line height for all body text, and has a minimum value of 150% for accessibility. <code>Header Line Height</code> sets the line height for all headers, and <code>Small Text Line Height</code> sets the value for all other text. These last two fields have a default value of 110%, and no limits are set at this time.</p>"},{"location":"designers/how-to-configure-fonts/#display-and-header-styles","title":"Display and Header Styles","text":"<p>This atom defines settings for all text with a display or header class, including h1-6, display1 and display2.</p>"},{"location":"designers/how-to-configure-fonts/#headerdisplay-font-weight","title":"Header/Display Font Weight","text":"<p>The user can set a font weight for all header classes. The default is 700 (bold). The same warnings are applied to this weight depending on the font selected as were for the other weights.</p>"},{"location":"designers/how-to-configure-fonts/#percent-change-in-headerdisplay-sizes","title":"Percent Change in Header/Display Sizes","text":"<p>This slider affects how greatly the headers vary in size as they increase their class.</p>"},{"location":"designers/how-to-configure-fonts/#class-settings","title":"Class Settings","text":"<p>There are 8 further settings below that open a modal and allow the user to edit settings for a specific class. The section includes, <code>Display 1</code>, <code>Display 2</code>, <code>Header 1</code>, <code>Header 2</code>, <code>Header 3</code>, <code>Header 4</code>, <code>Header 5</code>, and <code>Header 6</code>. For information on how this works see the Font Edit modal documentation.</p>"},{"location":"designers/how-to-configure-fonts/#body-styles","title":"Body Styles","text":"<p>This atom defines 6 classes that are used for body text. These include <code>Body 1</code>, <code>Body 1 - Bold</code>, <code>Body 2</code>, <code>Body 2 - Bold</code>, <code>Body 3</code>, and <code>Body 3 - Bold</code>. Each section allows the user to alter individual settings for each class. For information on how this works see the Font Edit modal documentation.</p>"},{"location":"designers/how-to-configure-fonts/#small-text-styles","title":"Small Text Styles","text":"<p>This atom defines 16 classes that are used in body text or forms, such as labeling fields, captioning images, button text and other purposes. These include <code>Subtitle 1</code>, <code>Subtitle 2</code>, <code>Caption</code>, <code>Caption Bold</code>, <code>Overline</code>, <code>Overline Large</code>, <code>Overline Extra Large</code>, <code>Label 1</code>, <code>Label 1 All Caps</code>, <code>Label 2</code>, <code>Label 2 All Caps</code>, <code>Label Small</code>, <code>Call to Action</code>, <code>Call to Action Small</code>, <code>Small</code>, <code>Small Semibold</code>. Each section allows the user to alter individual settings for each class. For information on how this works see the Font Edit modal documentation.</p>"},{"location":"designers/how-to-configure-fonts/#stat-styles","title":"Stat Styles","text":"<p>This atom defines 1 class that is used for stat text: <code>Stat</code>. This one section allows the user to alter individual settings for this class. For information on how this works see the Font Edit modal documentation.</p>"},{"location":"designers/how-to-configure-fonts/#font-edit-modal","title":"Font Edit Modal","text":"<p>Each individual text class is editable, and will open up a modal with a few settings.</p> <ul> <li>Font Family: A drop down where the user can select a font for this text style.</li> <li>Font Size: A slider where the user can select the font size for this text style.</li> <li>Font Weight: A drop down where the user can select a weight for this text style. Similar warnings apply to this as with any other weight selections.</li> <li>Character Spacing: A slider where the user can change the space between characters for this text style.</li> </ul> <p>To confirm the selected changes, the user must click <code>Save</code>, otherwise the selections will not take effect.</p>"},{"location":"designers/how-to-configure-overlays/","title":"How to configure disability overlays","text":"<p>Coming soon...</p> <p>The Theme Builder provides a plug-able architecture based on the layers which allow customized user preferences to be applied to design components. </p> <p></p> <p>Custom <code>overlays</code> can be developed to address a wide range of disabilities. Initially, Theme Builder includes overlays for several accessibility preferences:</p> <ul> <li>Dyslexic preferences</li> <li>Motion sensitivity preferences</li> <li>Color blind preferences</li> </ul> <p>However, at this juncture, this list needs to be expanded and the functionality of the initial overlays is incomplete.</p> <p>See our call for contributors.</p>"},{"location":"designers/how-to-work-with-storybook/","title":"How to use components with Storybook","text":"<p>Content herein has been deferred for a future milestone.</p> <p></p> <p>If you are interested in helping us document this feature, please see our call for contributors.</p>"},{"location":"designers/how-to-work-with-tokens/","title":"Using Design Tokens Generated by the A11y Theme Builder","text":"<p>Design tokens generated by the A11y Theme Builder are provided in a structured JSON format. These tokens encapsulate design decisions such as colors, typography, spacing, and more, which can be directly used in your project's stylesheets and code.</p>"},{"location":"designers/how-to-work-with-tokens/#json-structure","title":"JSON Structure","text":"<p>The generated JSON file is structured into various sections, each corresponding to different aspects of your design system:</p> <ul> <li>Atoms</li> <li>Molecules</li> <li>Organisms</li> <li>Layers</li> <li>Metadata</li> </ul>"},{"location":"designers/how-to-work-with-tokens/#example-json-structure","title":"Example JSON Structure","text":"<p><pre><code>{\n    \"atoms\": {\n        \"colorPalette\": {\n            \"colors\": [\n                {\n                    \"name\": \"Teal\",\n                    \"hex\": \"#3fb394\"\n                }\n            ],\n            \"defaultColorName\": \"Teal\"\n        },\n        ...\n    },\n    \"molecules\": {\n        \"avatars\": {},\n        ...\n    },\n    \"organisms\": {\n        \"dataTables\": {},\n        ...\n    },\n    \"layers\": {},\n    \"metadata\": {\n        ...\n    },\n    \"id\": \"My Design\"\n}\n ```\n ### Working with Design Tokens\n\n#### Atoms\n\nAtoms are the basic building blocks of your design system. They include color palettes, typography, spacing, and more.\n\n**Color Palette Example:**\n</code></pre> {     \"colorPalette\": {         \"colors\": [             {                 \"name\": \"Teal\",                 \"hex\": \"#3fb394\"             }         ],         \"defaultColorName\": \"Teal\"     } } <pre><code>To use this color in your CSS:\n</code></pre> :root {     --color-teal: #3fb394; }</p> <p>body {     background-color: var(--color-teal); } <pre><code>**Typography Example:**\n</code></pre> {     \"fontsSettings\": {         \"baseFontSize\": 16,         \"fontWeights\": [             300,             400,             600,             700,             800         ]     } } <pre><code>To use these font settings in your CSS:\n</code></pre> :root {     --base-font-size: 16px;     --font-weight-regular: 400;     --font-weight-bold: 700; }</p> <p>body {     font-size: var(--base-font-size);     font-weight: var(--font-weight-regular); }</p> <p>h1 {     font-weight: var(--font-weight-bold); } <pre><code>#### Molecules\n\nMolecules combine atoms to form more complex components like buttons, dropdowns, and sliders.\n\n**Button Example:**\n ```\n {\n    \"standardButtons\": {\n        \"minWidth\": 6\n    }\n}\n</code></pre> To use this button setting in your CSS: <pre><code> button.standard {\n    min-width: 6rem;\n}\n</code></pre> Chart Example: <pre><code>{\n    \"chartDonut\": {\n        \"cutoutThickness\": {\n            \"min\": 0,\n            \"max\": 100\n            }\n        }\n    }\n}\n</code></pre> To use this chart setting in your JavaScript chart configuration: <pre><code>const donutChartConfig = {\n    type: 'doughnut',\n    data: {...},\n    options: {\n        cutoutPercentage: 50 // Use a value between min and max\n    }\n};\n</code></pre></p>"},{"location":"designers/how-to-work-with-tokens/#organisms","title":"Organisms","text":"<p>Organisms are complex components made up of multiple molecules. Examples include data tables, navigation bars, and footers.</p> <p>Navigation Bar Example: <pre><code>{\n    \"primaryNav\": {}\n}\n</code></pre> To use this navigation bar in your HTML and CSS:</p> <p><pre><code>&lt;nav class=\"primary-nav\"&gt;\n    &lt;!-- Navigation items here --&gt;\n&lt;/nav&gt;\n</code></pre> <pre><code>.primary-nav {\n    /* Add your styles here */\n}\n</code></pre></p>"},{"location":"designers/how-to-work-with-tokens/#metadata","title":"Metadata","text":"<p>Metadata provides additional information about the design tokens, such as creation and update timestamps, and overall color settings.</p> <p>Metadata Example: <pre><code>{\n    \"metadata\": {\n        \"sample\": false,\n        \"time\": {\n            \"createdInMs\": 1681464745221,\n            \"lastUpdateInMs\": 1698766878813\n        },\n        \"colors\": {\n            \"primary\": \"#339779\",\n            \"secondary\": \"#3FB394\",\n            \"tertiary\": \"#75C8B2\",\n            \"background\": \"#F6FBFA\"\n        }\n    }\n}\n</code></pre> This information can be used for versioning or auditing purposes.</p>"},{"location":"designers/how-to-work-with-tokens/#how-to-work-with-design-tokens","title":"How to Work with Design Tokens","text":""},{"location":"designers/how-to-work-with-tokens/#step-1-extract-the-json-file","title":"Step 1: Extract the JSON File","text":"<p>First, ensure you have the JSON file generated by the A11y Theme Builder. This file contains all the design tokens you'll need for your project.</p>"},{"location":"designers/how-to-work-with-tokens/#step-2-import-the-json-file","title":"Step 2: Import the JSON File","text":"<p>Import the JSON file into your project. This can be done in various ways depending on your project's setup.</p> <p>Example using JavaScript: <pre><code>import designTokens from './path/to/design-tokens.json';\n</code></pre></p>"},{"location":"designers/how-to-work-with-tokens/#step-3-convert-json-to-css-variables","title":"Step 3: Convert JSON to CSS Variables","text":"<p>You can convert the JSON tokens to CSS variables for easy use in your stylesheets.</p> <p>Example using JavaScript: <pre><code>const root = document.documentElement;\n\nconst setCSSVariables = (tokens) =&gt; {\n    Object.keys(tokens).forEach(key =&gt; {\n        const value = tokens[key];\n        if (typeof value === 'object') {\n            setCSSVariables(value);\n        } else {\n            root.style.setProperty(`--${key}`, value);\n        }\n    });\n};\n\nsetCSSVariables(designTokens.atoms.colorPalette.colors[0]);\n</code></pre></p>"},{"location":"designers/how-to-work-with-tokens/#step-4-use-css-variables-in-your-stylesheets","title":"Step 4: Use CSS Variables in Your Stylesheets","text":"<p>Once the tokens are converted to CSS variables, you can use them throughout your stylesheets.</p> <p>Example using CSS: <pre><code>body {\n    background-color: var(--hex);\n}\n</code></pre></p>"},{"location":"designers/how-to-work-with-tokens/#step-5-utilize-tokens-in-component-styles","title":"Step 5: Utilize Tokens in Component Styles","text":"<p>Integrate the design tokens into your component styles to ensure consistency across your project.</p> <p>Example using React: <pre><code>const Button = () =&gt; {\n    return (\n        &lt;button style={{ backgroundColor: 'var(--color-teal)' }}&gt;\n            Click Me\n        &lt;/button&gt;\n    );\n};\n</code></pre></p>"},{"location":"designers/what-is-a-design-system/","title":"What is a design system?","text":"<p>A design system is the primary resource that a user will produce using Theme Builder.  It represents the collection of decisions that the user will make that will help achieve their vision for the look and feel of an application.  Each decision that is made will result in a variety of CSS variables being updated and persisted in order to capture the decision.  For example, a designer may begin a design system by selecting the colors, fonts, bevels and border styles (and more!) that are shared amongst an existing product family of their organization or they could blaze a fresh trail as they bring a brand new project to life.  They may also include additional accessibility overlays to support users with specific types of impairments.  This is all part of a design system.</p> <p>As they say, \"the proof of the pudding is in the eating\".  So once an author is satisfied with their design system, they'll want to try it out in their own environment.  The design system can be exported from Theme Builder as CSS or JSON.  This may then be imported into other design tools like Figma or into component libraries or even directly into application repositories.  Once an application or component library has been enabled to consume a Theme Builder design system, future updates (perhaps adding a sub theme or addming a new impairment overlay) should be relatively trivial.</p>"},{"location":"developers/","title":"Developers Intro","text":"<p>This section seeks to introduce information that can be used to enhance and extend the Theme Builder tool.  Topics such as how to add atomic elements (atoms, molecules, organisms) to the tool will support the effort to keep the tool current with emerging web or mobile UI components.  The ability to add more accessibility layers will allow applications to be even more inclusive.  And Theme Builder could also support other types of storage, other output formtats, and other modes.</p> <p>We recommend starting with the code walkthrough and branching out from there.  If you would like to contribute to this project, please see the contributor's guide for information on how to begin engaging with the community</p> <p>Need a How to Use tool Video for extending tool</p>"},{"location":"developers/add-a11y-layers/","title":"Adding Accessibility Layers","text":"<p>Coming Soon ...</p> <p>Accessibility Layers are visible and selectable from the user interface for color blindness, dyslexia, and motion sensitivity; however, the code generation part of the Theme Builder application does not yet support any of these layers.</p>"},{"location":"developers/add-a11y-layers/#adding-an-accessibility-layer-to-the-user-interface","title":"Adding an Accessibility Layer to the User Interface","text":"<p>The Accessibility Layers are currently visible in the user interface because of the AccessibilityLayersButton component which uses the SDK's layers object.  Therefore, in order to add a new Accessibility Layer to the user interface, simply add a new property to the SDK's layers object.  Be sure to also add the new property to the properties  array.</p>"},{"location":"developers/add-a11y-layers/#adding-support-for-an-accessibility-layer-to-the-sdk","title":"Adding support for an Accessibility Layer to the SDK","text":"<p>Both the CSS code generator and the JSON code generator must be enhanced in order to support each of the current accessibility layers: color blindness, dyslexia, and motion sensitivity.  The same work is required for any additional code generators.</p> <p>Exactly how an Accessibility Layer changes the generated code depends upon both the layer itself as well as the type of code that is being generated.</p> <p>Coming soon are modifications to the CSS code generator and JSON generator to support the current accessibility layers.</p>"},{"location":"developers/add-atomic-elements/","title":"Extending Atoms, Molecules, or Organisms","text":"<p>This section describes how a developer can extend the Theme Builder application with respect to atomic elements (i.e. atoms, molecules, or organisms).</p> <p>Although it depends upon your use case, in most cases it will require modifying both:</p> <ul> <li>the user interface code in the a11y-theme-builder repository (see Extending the User Interface section below), and</li> <li>the SDK code in the a11y-theme-builder-sdk repository (see Extending the SDK).</li> </ul> <p>Generally speaking, there are two ways of extending the Theme Builder application with respect to an atomic element:</p> <ol> <li>Adding an additional property to an existing atomic element, or</li> <li>Adding a new atomic element.</li> </ol> <p>The sections below describe how to perform these types of extensions for both the SDK and the User Interface.</p>"},{"location":"developers/add-atomic-elements/#extending-the-sdk","title":"Extending the SDK","text":"<p>The code for Design System, and for all of the atomic elements associated with Design System, lives in the SDK.  So this is where every journey to extend the design system must begin.</p> <p>See Extending the SDK.</p>"},{"location":"developers/add-atomic-elements/#extending-the-user-interface","title":"Extending the User Interface","text":"<p>The User Interface for Theme Builder is largely concerned with administering the currently loaded design system and all of its atomic elements.  Each atomic element in the UI is bound to the corresponding atomic element exposed by the design system in the SDK.  The UI will represent the atomic element in the UI using examples, the UI will register for listeners to be able to reflect changes to the atomic elements in real time, and the UI will allow the user to manage the properties on the elements.</p> <p>To begin:</p> <ul> <li>Ensure that the SDK is extended first with your new additions, and that this newest SDK version is present in your build.</li> <li>Create the React component for the new addition you are planning to make. Ensure it is in the correct directory depending on whether it is a atom, molecule, organism or component.  Be sure to import the SDK extension you made, and accept it as a property into your React component.</li> <li>Complete the new React component, by completing a HeadingSection, ExampleSection and Settings Section.</li> <li>Add your new component to the correct content page depending on whether it is a atom, molecule, organism or component.  This is where you would pass an atomic element from the design system to a new React component.</li> </ul> <p>The following image shows the various areas of the Theme Builder editor with the specific files that contribute to its rendering.</p> <p></p> <ul> <li>DesignSystemPage.tsx: The design system page.  Contains the title area, the horizontal tabs at the top of the page and the content space below the tabs.</li> <li>DesignSystemTitleBar.tsx: Title bar area at the top of the page containing the save button and accessibility layers</li> <li>AccessibilityLayersButton.tsx: Accessibility layers selection dropdown</li> <li>code/src/ui/src/pages/content: Location of the content pages for the main horizontal navigation tabs.  The atomic elements in the design system are bound to their UI components in the following pages.<ul> <li>AtomContent.tsx: Renders all atoms.  Contains the left nav bar and content area for the Atoms tab.</li> <li>MoleculeContent.tsx: Renders all molecules.  Contains the left nav bar and content area for the Molecules tab.</li> <li>OrganismContent.tsx: Renders all organisms.  Contains the left nav bar and content area for the Organisms tab.</li> <li>ComponentsContent.tsx: Renders all  components.  Contains the left nav bar and content area for the Components tab.</li> <li>PreviewContent.tsx: Renders preview content.  Contains the left nav bar and content area for the Preview tab.</li> <li>CodeContent.tsx: Renders code content.  Contains the left nav bar and content area for the Code tab.</li> </ul> </li> <li>LeftNavTabs.tsx: Each main tab content area has a left navigation list that uses the LeftNavTabs component</li> <li>code/src/ui/src/pages/atoms: Location for all atoms</li> <li>code/src/ui/src/pages/molecules: Location for all molecules</li> <li>code/src/ui/src/pages/organisms: Location for all organisms</li> <li>code/src/ui/src/pages/components: Location for all components</li> <li>code/src/ui/src/components/editors: Property editors used by atoms, molecules and organisms.<ul> <li>code/src/ui/src/components: Some color-based property editors used to create the default Color Theme and the Components color swatches are located here.</li> </ul> </li> </ul> <p>The pages for all atoms, molecules, organisms and components share a similar layout.  This was achieved by utilizing the following components on each page.</p> <ul> <li>HeadingSection.tsx: Heading section with title and  description</li> <li>ExampleSection.tsx: Example section <ul> <li>LightModeSection.tsx: Light mode section used to  show rendering for light mode</li> <li>DarkModeSection.tsx: Dark mode section used to show  rendering for dark mode</li> </ul> </li> <li>SettingsSection.tsx: Settings section that contains the property editors</li> <li>GeneratedCodeSection.tsx: Used by Atom, Molecule and Organism pages.  It is a code section that displays the CSS variables managed by the atomic element (atom, molecule or organism) bound to a given page and each variable's real-time value</li> </ul>"},{"location":"developers/add-atomic-elements/#walkthrough-creating-a-new-atom","title":"Walkthrough: Creating a new Atom","text":"<p>We have included an Example Atom as a DEMO.</p> <p>Follow the comments labeled with <code>DEMO</code> in the above file and the Atom Content Page.</p> <p>As you develop a new atom, molecule, organism or component and begin defining the style rules that will apply to it, keep in mind that the atomic element needs to be able to render equally well in light or dark mode.  For more on this topic, see: Managing Light and Dark Mode.</p>"},{"location":"developers/add-output-generators/","title":"Adding Output Generators","text":"<p>Each output generator in the Theme Builder application has the goal of representing the currently loaded design system in a unique, consumable format.  At this time CSS and JSON are the supported formats, but we certainly see many other potential formats as Theme Builder is incorporated into more and more environments.  For example, you might want all of the documents and presentations that your company produces for the public to share the look and feel that you've already defined in your company's design system.  If these artifacts are all generated using a particular office suite, you might benefit from an output generator that can generate a theme in a format that can be imported into your office suite.  And because the theme is based on Theme Builder computations, you can be confident that your documents will meet accessibility standards.</p> <p>The Theme Builder application is designed to be extensible with regard to code generators.  To get a feel for what a code generator implementation may look like, have a look at our base code generators:</p> <ul> <li>CSS code generator</li> <li>JSON code generator</li> </ul>"},{"location":"developers/add-output-generators/#adding-an-output-generator-to-the-sdk","title":"Adding an Output Generator to the SDK","text":"<p>See How To Add a New Code Generator in the SDK documentation.</p>"},{"location":"developers/add-output-generators/#adding-an-output-generator-to-the-user-interface","title":"Adding an Output Generator to the User Interface","text":"<p>Once a new output generator has been added to the SDK, it can be added to the <code>Code</code> page in the UI.  </p> <p>The left nav lists all Output Generators (labeled as Code Generators).  To add a new tab, edit CodeContext.tsx.</p> <p>Add a <code>&lt;LeftNavItem&gt;</code> for your output generator to the <code>&lt;List&gt;</code> element</p> <pre><code>&lt;List ...&gt;\n    ...\n    &lt;LeftNavItem \n        text={\"MyGenerator\"} \n        value=\"myGenerator\" \n        indent={1} \n        selected={showItem} \n        onClick={()=&gt; {setShowItem(\"MyGenerator\")}} \n        disabled={disabled}\n    /&gt;\n&lt;/List&gt;\n</code></pre> <p>Add your content to the <code>design-system-editor-right-content-scrollable</code> div to have it rendered when your generator is selected in the left nav.</p> <pre><code>&lt;div className=\"design-system-editor-right-content\"&gt;\n    &lt;div className=\"design-system-editor-right-content-scrollable\"&gt;\n        ...\n        {showItem === \"myGenerator\" &amp;&amp; &lt;&gt;\n            Add your content here\n        &lt;/&gt;}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"developers/add-storage/","title":"Adding Other Storage Options","text":"<p>The Theme Builder is designed to be extensible with regard to it's storage.</p> <p>The Storage Interface defines the entry points for the storage layer used by the Theme Builder application.</p> <p>The default implementation of this interface for the standalone SDK is memory storage; however, as implied by the name, this is not persistent storage.</p> <p>The default implementation of this interface for the Theme Builder application is ServerStorage which implements a REST-ful client API back to the server.</p> <p>There is also a LocalStorage that saves the design system in the browser's localStorage object. </p> <p>In order to support another type of storage, you would need to provide a new implementation of the Storage Interface and pass in an instance of this object when calling <code>ThemeBuilder.create</code> in the SDK as is done in this file.</p>"},{"location":"developers/code-walkthrough/","title":"Code Overview","text":"<p>This section provides an overview of the code comprising the Theme Builder application.</p> <p>It is divided into two sections based upon two different github repositories:</p> <ul> <li>User Interface Code Overview</li> <li>SDK Code Overview</li> </ul>"},{"location":"developers/code-walkthrough/#user-interface-code-overview","title":"User Interface Code Overview","text":"<p>The user interface code is in the a11y-theme-builder repository.</p> <p>The following is an overview of the code layout of this repository:</p> <ul> <li>code/src/ui/src - All code for the UI is contained here.</li> <li>code/src/ui/src/components - The directory containing all helper/non-page react components.</li> <li>code/src/ui/src/pages - The directory containing all larger react components that represent pages.</li> <li>code/src/ui/src/pages/content - The directory containing all the main landing pages for all main tabs.</li> <li>code/src/ui/src/pages/atoms - The directory containing all react components for ThemeBuilder Atoms.</li> <li>code/src/ui/src/pages/molecules - The directory containing all react components for ThemeBuilder Molecules.</li> <li>code/src/ui/src/pages/organisms - The directory containing all react components for ThemeBuilder Organisms.</li> <li>code/src/ui/src/pages/components - The directory containing all react components demonstrating ThemeBuilder Molecules.</li> </ul>"},{"location":"developers/code-walkthrough/#sdk-code-overview","title":"SDK Code Overview","text":"<p>The SDK code is in the a11y-theme-builder-sdk repository.</p> <p>See SDK code layout for an overview of the SDK code.</p>"},{"location":"developers/create-desktop-theme/","title":"Page Title Here","text":"<p>Content Pending...</p>"},{"location":"developers/create-mobile-theme/","title":"Page Title Here","text":"<p>Content Pending...</p>"},{"location":"developers/managing-modes/","title":"Managing Light and Dark Modes","text":"<p>Switching between light and dark modes for a web app is often accomplished by creating a <code>.darkmode</code> CSS class that can be added to a container such as the <code>&lt;body&gt;</code> element.</p> <p>The Theme Builder follows this strategy and enables sections of its UI to display atomic elements in dark mode by including a <code>.darkmode</code> class.</p> <pre><code>&lt;body class=\"... darkmode\"&gt;\n&lt;/body&gt;\n</code></pre> <p>The Theme Builder generates root light mode and dark mode colors and stores them in CSS variables that can be used when creating your component classes.  The naming convention for these variables is <code>--varName</code> for light mode and <code>--dm-varName</code> for dark mode.</p> <p>For example, if the design system has a color in its color palette named <code>mycolor</code> and uses this color in its default color theme, the root button variables generated by the SDK could use it like so:</p> <pre><code>--button: var(--mycolor-400);\n--on-button: #FFFFFF;\n\n--dm-button: var(--dm-mycolor-400);\n--dm-on-button: #121212;\n</code></pre> <p>All root variables are added to the <code>:root</code> css as they are generated by the SDK.  This is why the Theme Builder UI is responsive to property value changes in the SDK.  (See TS.css for the Theme Builders root CSS).</p> <pre><code>:root {\n    --button: var(--mycolor-400);\n    --on-button: #FFFFFF;\n    --dm-button: var(--dm-mycolor-400);\n    --dm-on-button: #121212;\n    ...\n}\n</code></pre> <p>These CSS variables are then available to be used by your component.  For example, the button component CSS classes that style a button:</p> <pre><code>.button {\n  background: var(--button) !important;\n  color: var(--on-button) !important;\n}\n\n.darkmode .button {\n  background: var(--dm-button) !important;\n  color: var(--dm-on-button) !important;\n}\n</code></pre> <p>Any new components added to Theme Builder should use the same approach to ensure they work correctly.  In addition, this approach is recommended for applications and component libraries that use a design system generated by Theme Builder.</p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#person-needing-accommodations","title":"Person Needing Accommodations","text":"<p>A content consumer with one or more disabilities or disorders. Needs to be able to interact with accessible content to achieve goals.</p>"},{"location":"glossary/#designer","title":"Designer","text":"<p>Defines consistent design language components and style. Needs to be able to create accessible styling for content creators and developers with minimal effort.</p>"},{"location":"glossary/#developer","title":"Developer","text":"<p>Implements design language in software systems that generate content. Needs to be able to create accessibly inclusive renderings with ease.</p>"},{"location":"glossary/#content-creator","title":"Content Creator","text":"<p>Utilizes the design language to produce consistently styled content. Needs to publish accessible content without extra steps or effort.</p>"},{"location":"glossary/#design-tokens","title":"Design Tokens","text":"<p>Visual values that construct the foundational pieces of a design. These values are data representations of design system elements (i.e.: spacing, color, typography, object styles, animation). They are used to construct and maintain a design system. Examples include: a color as a RGB value, an opacity as a number, an animation ease as Bezier coordinates.</p>"},{"location":"glossary/#design-workbench","title":"Design Workbench","text":"<p>An integrated development environment tool for UI component developers to create and test components in isolation. Enables Designers to store and share reusable design components and interactions that are created using Design Tokens. Storybook is an example of a Design Workbench.</p>"},{"location":"guides/","title":"Workflow Guidance","text":"<p>Imagine the possibilities!  How many ways could the Theme Builder application be used or extended?</p> <p>We have dedicated this section in our documentation to providing guidance on how current and/or future features could be put to use.  As you read these guides you will learn how to accomplish specific tasks for Designers and Developers and explore how community members have used the tool.  Please join us in this ongoing effort to create more guides, documenting new and exciting integrated workflows.</p> <p>In this section you will find:</p> <ul> <li>answers to existing scenarios</li> <li>suggestions for scenarios that need community input and guidance</li> <li>calls for new scenario ideas</li> </ul> <p>Remember, if you are interested in helping us enhance this tool, please join the project and see our call for contributors.</p>"},{"location":"guides/alternative-js-libs/","title":"Using alternative Javascript libraries","text":"<p>Content herein has been deferred for a future milestone.</p> <p></p> <p>If you are interested in helping us document this feature, please see our call for contributors.</p>"},{"location":"guides/create-a-design-system/","title":"Create a design system","text":"<p>The act of creating a design system is very easy.  After loading the application, click on the <code>Your Design Systems</code> entry in the left navigation menu.  If you do not see this item in your left nav bar, click on the icon in the upper left of the application to return to the root of the Theme Builder application.  After clicking on <code>Your Design Systems</code>, click on the <code>Create a New Design System</code> button.  You will be presented with a popup window.  Enter a name for this new design system and then click the <code>Next</code> button.</p> <p>The steps below will help you initialize a Theme Builder design system.</p>"},{"location":"guides/create-a-design-system/#step-1-populate-your-color-palette","title":"Step 1. Populate your color palette","text":"<p>A design system in Theme Builder has humble beginnings.  When a new design system is created in Theme Builder, you, the author, are initially restricted to very few actions.  You must first define a color palette.  This will be the collection of colors from which themes can be defined.  You may decide to define a color for every color that exists in your company's brand or just the subset that will be used by a specific application.  However, at least one color must be present in the color palette before you can progress to the next stage, defining the default theme for the design system.</p>"},{"location":"guides/create-a-design-system/#add-a-color-to-the-color-palette","title":"Add a color to the color palette","text":"<ol> <li>Make sure that <code>Color Palette</code> has been selected from the <code>ATOMIC SETTINGS</code> section on the left navigation menu.</li> <li>Specify the name of the color that you are adding.</li> <li>Select the color from the Color Picker.</li> <li>Click <code>Add Color</code>.</li> </ol> <p>You will be presented with the list of colors in the palette, as rows of 10 shades.  Add as many colors as desired.  You may add colors to the color palette in the design system at any time.</p>"},{"location":"guides/create-a-design-system/#step-2-select-colors-for-the-default-color-theme","title":"Step 2. Select colors for the default color theme","text":"<p>Until the default theme is complete, no other parts of the design system will be configurable.</p>"},{"location":"guides/create-a-design-system/#specify-colors","title":"Specify colors","text":"<ol> <li>Make sure that <code>Color Theme</code> has been selected from the <code>ATOMIC SETTINGS</code> section on the left navigation menu.</li> <li>Select primary, secondary and tertiary colors.  For each of these values, you will be allowed to choose from the tray of shades that will be generated from each color available in the color palette.  Once these three colors are defined, you will be free to draw upon these colors and their shades to define which will be used for various aspects of the default theme (such as background colors, button colors and icon colors).<ul> <li>Note:<ul> <li>Unless all three colors are selected, some of the subsequent fields (e.g. button, icon) may not be selectable.</li> <li>If you change the values of the primary, secondary or tertiary colors after subsequent fields have been configured, all subsequent field values will be cleared to prevent potentially invalid field values from being saved.</li> <li>Values for all fields must be specified to proceed to the next step.</li> </ul> </li> </ul> </li> <li>Click <code>Show Theme</code> to indicate that you are satisfied with the default theme.</li> </ol> <p>Note: Once you have confirmed your decision, you will be presented with a read-only representation of all of the values that you selected, displayed in light mode and dark mode.  At this point, the default theme will no longer be modifiable.  The reason behind this is that changes to the default theme, after other parts of the design system are configured, could largely invalidate those selections.  In a future version, creating sub themes will be possible which will overlay the default color theme; thus allowing for a modifiable color theme in your design system.</p> <p>You may want to save your design system at this point to serve as a foundation from which to populate future design systems or as a safe restore point from which to begin again.</p> <p>Upon establishing the default theme, Theme Builder will now allow you to modify any aspect of the design system that you wish.  To begin, we lightly suggest that you define values at the atom level initially and progress next to the molecules.</p>"},{"location":"guides/create-a-design-system/#step-3-select-typography-values","title":"Step 3. Select Typography values","text":"<p>Along with coloring, selecting a good font will provide a great foundation for styling your application.  More information on configuring the Typography in your design system can be found here.</p>"},{"location":"guides/create-a-design-system/#interlude-helpful-insights","title":"Interlude: Helpful Insights","text":"<p>As you grow more satisfied with the style that you are achieving, feel free to progress to more complex combinations like organisms.  You may notice that some colors you select, for example in State Settings, will not be used by Theme Builder.  It may choose to use similar, though slightly different, colors.  This is by design.  In order to meet the requirements set out in the accessibility guidelines, some colors cannot be used in combination with others as contrast ratios limits have to be observed.  Similarly, you may find yourself unable to change some settings.  For example, you may not be given the ability to choose to not underline hotlinks.  Again, to be compliant with the standards, hotlinks must be easily differentiated from its background and the text that surrounds it.  Based on the background and hotlink colors that you selected, this differentiation may only be achievable by underlining the hotlink.</p> <p>So how can you evaluate your new design system?  One thing that you may notice as you use Theme Builder is that the tool itself uses many of the CSS variables that are being affected by your choices.  Button shapes and colors, border shades and elevations and many other visual cues in its user interface will change to reflect the values you selected.  This allows you to be immersed in the design and feel it for yourself.  Theme Builder also provides tabs like Preview and Components which collect many of the most popular atoms and molecules together to form more complex components and views where the styling that you have been composing can be exhibited in very tangible ways.</p>"},{"location":"guides/create-a-design-system/#other-atoms","title":"Other Atoms","text":"<p>The other atoms in Theme Builder are a bit less visible than colors and typopgraphy, but no less important.  As with the color and typography settings, these atom values will be shared across your application as you develop more complex components.  In this section you'll be able define the spacing and click area of elements, their border size and radii, how textfields look by default and when they have focus, whether hotlinks are underlined, how pronounced elevation and bevels are, and animation settings.</p>"},{"location":"guides/create-a-design-system/#molecules","title":"Molecules","text":"<p>The molecules in Theme Builder roughly approximate the components available in most component libraries.  While many of these components will already reflect the atom settings you have initialized, the molecule settings allows you to set some important characteristics on each specific type of component.  You'll be able to configure settings such as border values unique to avatars, dropdown menu item highligting, section and paragraph spacing and text, padding, bevels and elevations on buttons, cards, chips, images, modal dialogs, popovers, sliders and toasts.</p>"},{"location":"guides/create-a-design-system/#organisms","title":"Organisms","text":"<p>The organisms in Theme Builder today are just a taste for what could be imagined and further developed by the community.  Organisms are built from atom and molecule components to achieve a richer experience for the end user.  Currently Theme Builder allows you to provide values to hero organism settings which will affect a hero's font size and spacing.  It also allows you to preview a variety of heroes using these values.</p>"},{"location":"guides/create-a-design-system/#components","title":"Components","text":"<p>The Components tab in Theme Builder is similar to the molecules section in that the components that comprise this part of the application are the most popular widgets used in web and mobile applications.  However, this section is meant only to reflect the values that have already been chosen and does not allow you to further configure the design system.  Here you'll be able to see many of the color and typography settings that have been specified as well as displaying the wide array of components in isolation, reflecting their current settings against a variety of backgrounds.  As an example, you'll be able to see what small and large buttons, with and without icons, will look like with their current padding, border, bevels and elevation settings against the default background color as well as black and white background colors.</p>"},{"location":"guides/create-a-design-system/#preview","title":"Preview","text":"<p>Coming soon...</p> <p>Where the Components tab showed components in isolation, the Preview tab is meant to collect a large number of these components together and display them in a page much like any number of applications may do.  To see them in their natural habitat, so to speak.  You'll see widgets like buttons, radio buttons and checkboxes in forms amongst a hero and some paragraphs with proper typography and spacing.  As the number of molecules and organisms expand over time and the industry adopts new interaction patterns, so should our Preview.</p>"},{"location":"guides/create-a-design-system/#code","title":"Code","text":"<p>The Code tab will collect all of the styling rules that have been generated by the tool in response to the values that you have set in the atom, molecule and organism sections of the design system.  Here you'll be able to see the root CSS variables as well as the CSS overlays that pertain to mobile and each of the selected accessibility layers.  To export these values, you'll be able to copy these to your clipboard or download them into files which can then be imported into other tooling.</p>"},{"location":"guides/create-react-component/","title":"Create React Components","text":""},{"location":"guides/create-react-component/#the-design-system-has-been-finalized-now-what","title":"The design system has been finalized.  Now what?","text":"<p>After a design system has been created and exported from the Theme Builder tool, what happens next?  How can an application take advantage of the output?  This document will explore the scenario where the down-stream consumer of the design system will be a React component library or a React-based application.</p> <p>Whether you have an existing component library or application or are creating a new one, the ideas presented here are still applicable.  But for the sake of clarity, let's consider a specific scenario where you are a developer on an existing application that uses a React-based component library, like Material UI (Mui).  Your designer has just used Theme Builder to create a design system and is handing you this CSS for you to use in your application.  How do you proceed?</p>"},{"location":"guides/create-react-component/#explore-the-theme","title":"Explore the theme","text":"<p>You'll notice patterns in the naming of the CSS variables.  Being aware of these patterns may help you feel more comfortable using these styles.  Here are some examples:</p> CSS Variable pattern Description Example --component Styles for a component type --button --on-component Foreground color of the component --on-button --dm-component Styles for a component type in darkmode --dm-button --dm-component Foreground color of the component when in darkmode --dm-on-button --variable-number Often used to signify a calcuation made with a CSS variable value and a multiplier --spacing-4"},{"location":"guides/create-react-component/#store-the-theme","title":"Store the theme","text":"<p>It is our recommendation that you store the Theme Builder-generated design system that your designer provided to you as a file in your source code repository.  This file will contain little more than a collection of root CSS variables with default values.  It will be up to you to bind the appropriate styling rules in your application to the CSS variables in this file.  If this is done correctly, then updating your application's design system in the future should be little more than replacing this file with a newly exported Theme Builder design system.</p>"},{"location":"guides/create-react-component/#binding-component-to-theme","title":"Binding component to theme","text":"<p>The first hurdle that you will encounter is trying to determine which of the 1000+ CSS variables are applicable to you and your application.  Let's begin with a simple example.  How would you style standard pushbuttons in your application using your design system?</p>"},{"location":"guides/create-react-component/#import-design-system","title":"Import design system","text":"<p>You can import a design system file that your designer provided to you into your local copy of Theme Builder by using the <code>IMPORT A DESIGN SYSTEM</code> button under the <code>Your Design Systems</code> page.  Once imported, the design system can be loaded by clicking on the card.  You will quickly see what parts of your design system are in play on each tab.  Theme Builder itemizes all of the CSS variables that are generated by the settings section for each atom, molecule or organism in the tool. </p>"},{"location":"guides/create-react-component/#helpful-examples","title":"Helpful examples","text":"<p>As you play around with Theme Builder, you'll notice that the Theme Builder application itself is a consumer of many of the CSS variables loaded in the current design system.  As you make changes to atom and molecule settings, you may notice the tool's UI adopting these updated values in background colors and typography, button colors and shapes, and many, many other styles.  So should you find yourself at a loss as to how to achieve a particular style in your application that you see in Theme Builder, look no further!</p>"},{"location":"guides/create-react-component/#lets-try-this-choose-your-component","title":"Let's try this.  Choose your component","text":"<p>As mentioned above, let's use a pushbutton as an example of a component from your application that you want to bind to your design system.</p> <p>After loading the design system into Theme Builder, activate the <code>ATOMS</code> tab.  Then select the <code>Buttons-Standard</code> option from the left-hand menu.  Verify that the colors, typography, and button styling reflect those of your design system.  If you now scroll to the bottom of this page, you'll see, under the <code>Generated Code</code> section, the CSS variables that were generated in your design system by the Standard Buttons Molecule settings fields and a description for each.</p> <p>If you scroll back toward the top of the page, to the <code>Example</code> section, you'll see styled examples of each button type, Primary, Secondary and Tertiary.  One or more of these will likely correspond to buttons in your application.  If you use your browser's developer tools to inspect the CSS for the Primary button, you'll see the variables mentioned in the <code>Generated Code</code> section, but you'll also see styles that have been applied to the button by Theme Builder.  For example, for the Primary button, you may see that <code>{color: var(--on-button)}</code> binds the button's text color to the <code>--on-button</code> CSS variable in your design system.  Now you would know that you should bind <code>var(--on-button)</code> to the CSS styling rule that you are currently using in your application to define button text color.</p> <p>In addition to the atom, molecule and organism examples, the Preview and Components tabs have more examples of Theme Builder displaying content that is already bound to the CSS variables of the currently selected design system.</p>"},{"location":"guides/create-react-component/#reference-styling","title":"Reference styling","text":"<p>You may find it useful to see how Theme Builder binds its components to its design system.</p>"},{"location":"guides/create-react-component/#css","title":"CSS","text":"<p>We recommended earlier in this document to separate your root CSS variables from your CSS rules, and that is the approach that Theme Builder uses.  The CSS used to style the Theme Builder components is largely located in two places.  TB.css holds all of the root CSS variables along with their default values. Theme.css contains all of the CSS classes that make use of the CSS variables and binds them to the components.  Because the components for Theme Builder are displayed under the design system section of the tool, some styles in the tool may also be impacted by DesignSystemPage.css.</p> <p>Note: Theme Builder was built using Material UI (Mui) components.  So you may see Mui-specific classes in some of the CSS rules.  This allows the components to properly use the values specified in the design system.</p>"},{"location":"guides/create-react-component/#json","title":"JSON","text":"<p>As mentioned above, Theme Builder was built using components from the Mui component library.  Mui allows you to specify a theme for your Mui-based applications using JSON and its ThemeProvider component, as outlined here.  If your application already uses Mui, you may find it worth your time to see if you can leverage the JSX file that we built to bind our most oft-used CSS variables to Mui components.  This file is Theme.jsx.</p>"},{"location":"guides/create-react-component/#summary","title":"Summary","text":"<p>We hope that the practical advice in this document will help improve your experience adapting your applications and component libraries to use Theme Builder design systems.  This can be a time consuming task initially, but we feel that the accessibility gains that your application should experience will be well worth the effort.</p>"},{"location":"guides/design-workflow-with-tokens/","title":"Design workflow with Figma Tokens","text":"<p>The power of Design Ops can be quickly demonstrated with a workflow toolchain that combines the Theme Builder and Figma. </p> <p>Try this yourself by following a few simple steps:</p> Step Action 1 Build your theme using the Theme Builder and REMEMBER to click SAVE! 2 Sign up / Sign in to Figma.  You will need a Professional, Organization or Enterprise Account. 3 Make sure you are using Figma Beta 4 Install Tokens Studio Pro 5 Create a duplicate of our sample Theme Builder - Figma Component Library file. 6 Apply your theme to the Figma Theme Builder File"},{"location":"guides/headless-sdk-for-cicd-pipeline/","title":"Using SDK headless in CI/CD pipeline","text":"<p>Content herein has been deferred for a future milestone.</p> <p></p> <p>If you are interested in helping us document this feature, please see our call for contributors.</p>"},{"location":"guides/replace-sample-app/","title":"Replace Sample Preview","text":"<p>Content herein has been deferred for a future milestone.</p> <p></p> <p>If you are interested in helping us document this feature, please see our call for contributors.</p>"},{"location":"guides/test-theme-with-fable/","title":"Testing a Theme with Fable","text":"<p>Content herein has been deferred for a future milestone.</p> <p></p> <p>If you are interested in helping us document this feature, please see our call for contributors.</p>"},{"location":"motivation/atomic-layers/","title":"Atomic layers","text":""},{"location":"motivation/atomic-layers/#systems-and-themes","title":"Systems and Themes","text":"<p>Theme builder distinguishes between system and theme atoms.  </p> <p></p> <p>Each theme is layered on top of the core design system.The default theme rendered is either desktop or mobile in light mode.  But additional themes can be layered to create endless additional experiences.</p> <p></p> <p>Additional theme layers can be applied by the user to generate themes that are effectively a combination of atomic layers. Initially layering support is provided for the following accessibility preferences:</p> <ul> <li>Dyslexic preferences</li> <li>This updates all the fonts to Open Dyslexic </li> <li>Increases line heights for improved readability for dyslexic end users</li> <li> <p>(Future) Color contrast options</p> </li> <li> <p>Motion sensitivity preferences</p> </li> <li> <p>Removes animations from all components</p> </li> <li> <p>Color blind preferences</p> </li> <li>Users can choose to adjust the colors of the branded components to colors that best accommodate their specific color perception deficiency Protanopia, Deuteranopia, and Tritanopia</li> <li>The updated colors meet the WCAG contrast guidelines and are non-jarring and visually pleasing</li> </ul> <p>Themes can also be organization into different sub themes. For example rendering experiences with different system color palette combinations.  </p> <p></p> <p>To better understand the power of Theme Builder, let us imagine we need to build an entire Design System to meet the legal requirements of WCAG AA guidelines (Enterprise Grade) and then find we need a WCGA AAA compliant (Government Grade) system for a government contract. </p> <p></p> <p>Typically, this would be very challenging. However, with the Theme Builder all we need to do is:</p> <ol> <li>Duplicate our AA compliant design system </li> <li>Update one atomic setting for the WCAG compliance from AA to AAA.<ul> <li>The atomic elements of new design system will be automatically updated:<ul> <li>Colors and contrast will be automatically updated to meet the elevated requirements</li> <li>Line heights updated</li> <li>Character spacing is updated </li> </ul> </li> </ul> </li> <li>Save the new Design System. </li> </ol>"},{"location":"motivation/challenges/","title":"Workflow Challenges","text":"<p>Web Accessibility (or e- Accessibility) pertains to the design of websites and mobile applications that do not present barriers of access to people needing accommodations. The development of these digital solutions need to consider accessibility compliance along the entire production workflow from design, to development, to printing/rendering. </p> <p>Enterprises and Governments (herein, \"Institutions\") need to manage the balance between risk compliance, user experience, and accessibility inclusion when developing digital solutions (mobile, web). However, several end-to-end collaboration challenges exist between designers and developers as it relates to the creation of risk compliant accessibility solutions:</p>"},{"location":"motivation/challenges/#institution-perspective","title":"Institution Perspective","text":"<ol> <li>Lack of WCAG AA or AAA compliance increases exposures to fines and lawsuits.</li> <li>Being highly leveraged on 3<sup>rd</sup> party service to identify and help fix accessibility tools is suboptimal.</li> <li>Desktop and mobile experiences are often not aligned.</li> </ol>"},{"location":"motivation/challenges/#developer-perspective","title":"Developer Perspective","text":"<ol> <li>Component reuse is not optimized.</li> <li>Design libraries do not leverage continuous improvement and continuous deployment processes.</li> <li>Design to development lifecycle tends to be slow.</li> <li>Too much time and money are being spent implementing solutions and not enough time being devoted to innovation and testing.</li> </ol>"},{"location":"motivation/challenges/#designer-perspective","title":"Designer Perspective","text":"<ol> <li>Brand and product teams do not always share design assets.</li> <li>Design libraries do not meet accessibility standards, yielding internal and external solutions with the same issues.</li> <li>Developers lack access to the tools the designers are using. </li> <li>Developers do not adhere to designs and create their own design variation.</li> </ol>"},{"location":"motivation/imagine/","title":"Imagine","text":"<p>Since Atomic Design enables designers and developers to establish a round-trip workflow process that traverses from abstract concepts to concrete details; and given the challenges associated with risk compliance for people needing accommodations (Visual, Motion, Motor, Auditory, Cognitive/Learning), what if:</p> <ul> <li>We applied Atomic Design concepts towards the development of accessibly compliant solutions, yielding consistency and scalability while mitigating regulatory risk?</li> <li>An atomic design system could allow us to apply reuse, scaling, Continuous Integration and Continuous Delivery in the creation of user experiences?</li> <li>We had design and development libraries that were associated with each other?  If changes happened in one they would be pushed to the other.</li> <li>We could create an atomic design system that was rooted in accessibility, assuring all components met accessibility guidelines?</li> <li>We could update atomic elements and roll changes across all products in minutes rather than months or years?</li> <li>We could align desktop and mobile experiences?</li> <li>We could seamlessly deliver light and dark mode experiences that meet WCAG guidelines?</li> <li>We could provide on-demand, profile-aware experiences that addressed a user's specific accessibility needs?</li> </ul>"},{"location":"motivation/methodology/","title":"Methodology","text":""},{"location":"motivation/methodology/#inspiration","title":"Inspiration","text":"<p>Atomic Design is a methodology, developed by Brad Frost, for creating design systems.</p> <p>The methodology enables the creation of scalable systems, reusable components, and design systems. While originally associated with the design of web interfaces, this methodology can be applied to a wide array of design domains. There are five distinct levels in Atomic Design:</p> Component Description Atoms Atoms represent the smallest entity in UI elements and they can\u2019t be broken down any further. They serve as the foundational building blocks of your interface. Some examples are: colors, fonts, animations and single images. Molecules Molecules are groups of compound atoms. Molecules are associated with distinct properties and serve as the backbone of design systems. In the web arena, molecules depict simple UI elements functioning together as a unit. Some   examples are: a form label, search input, and buttons. Organisms Organisms are groups of molecules and/or atoms joined together to form a relatively complex, distinct section of an interface.  Examples include: navigation, sidebars, forms, and popups. Templates Templates consist mostly of groups of organisms stitched together to define the structure (design) of possible pages. Templates are void of real content. Pages Pages are instances of templates that contain real content. Essentially, they combine all the components of a design coupled with real data. <p>Atomic Design provides a clear methodology for crafting design systems based on a series of related building blocks (design components).</p>"},{"location":"motivation/methodology/#accessibility","title":"Accessibility","text":"<p>Web Accessibility (or e-Accessibility) pertains to the design of websites and mobile applications that do not present barriers of access to people needing accommodations. Yet the principles of inclusion that e-Accessibility attempts to address are not limited to digital interfaces. The broader challenge is to address the inaccessible use or access of instruments or interfaces in physical as well as digital environments in a common and consistent manner. The process of printing physical instruments (i.e.: menus, tickets, Credit cards, contracts, identity documents) requires the same a priori knowledge of impairment preferences as the process for rendering digital interfaces.</p> <p></p> <p>Given the challenges associated with risk compliance for people needing accommodations (Visual, Motion, Motor, Auditory, Seizures, Cognitive/Learning), Atomic Design enables designers and developers to establish a round-trip workflow process that traverses from abstract concepts to concrete details. The application of Atomic Design concepts towards the development of accessibly compliance solutions can yield consistency and scalability while mitigating regulatory risk.</p> <p>An Atomic Accessibility Design Methodology extrapolates the concepts of atomic design to provide a general purpose approach to the systematic publishing/rendering of accessible content relating to physical and digital instruments.</p> Component Description Atoms Atoms represent micro-services associated with partial aspects of content publishing/rendering process. For example the handling of content attributes or elements. Molecules Molecules are groups of compound atoms. Molecules are associated with distinct properties and serve as the backbone of design systems. Molecules represent micro-services associated with the processing of groups of compound atoms.  For example the handling of content features. Organisms Organisms are macro-services that group together molecules and/or atoms to address disability/disorder specific needs.  Examples include dyslexia, motion sensitivity, color blindness. Themes Themes consist mostly of groups of organisms stitched together to define the structure (design) of yet-to-be published content types. Themes are void of real content. Instruments Digital or physical instances where content is printed/rendered using a theme and applying the the theme to real content. Essentially, they combine all the components of a design coupled with real data."},{"location":"motivation/methodology/#scope","title":"Scope","text":"<p>An Atomic Accessibility Design Methodology is applicable to a range of disabilities and disorders that impact the experience individuals have when interacting with physical and digital content. </p> <p></p> <p>The list of such impairments include but is not limited to:</p> <ul> <li>Learning - difficulty in one or more areas of learning</li> <li>Motion - sensitivity to surroundings with visual motion or repetitive patterns</li> <li>Mobility - difficulty walking or climbing stairs</li> <li>Cognition - difficulty concentrating, remembering, or making decisions</li> <li>Independent Living - difficulty doing errands alone</li> <li>Hearing - difficulty hearing</li> <li>Vision - difficulty seeing</li> <li>Self-care - difficulty dressing or bathing</li> </ul>"},{"location":"motivation/situation/","title":"Situation","text":""},{"location":"motivation/situation/#economic-impact","title":"Economic Impact","text":"<p>A wide range of disabilities and disorders (impairments) prevent billions of people globally from interacting with physical and digital instruments that are socially and economically necessary. The demand for accessibly inclusive products is rising. An enormous number of global companies (Content Creators or Producers),that publish these instruments to be consumed, need to consistently generate risk compliant instruments.</p> <p>For example, vision impairments alone present a global financial burden.  The annual global costs of productivity losses associated with vision impairment are estimated to be US $411 billion. Regardless of the cause, most people with vision impairment and blindness are over the age of 50 years; however, vision loss can affect people of all ages.</p> <p></p> <p>Given a world population of 8 billion, where the number of internet and social media users worldwide is 5 billion people and at least 2.2 billion people globally suffer from visual disabilities -- the need to address loss of productivity and diminished quality of life for this demographic in the digital age is paramount.</p>"},{"location":"motivation/situation/#legislation","title":"Legislation","text":"<p>Governments have long acknowledged the importance of inclusion and the benefits that society enjoys when all members are able to participate in their communities.  In the United States, for example, the Rehabilitiation Act of 1973 began protecting disabled Amaricans from discrimination and eventually led to the American with Disabilities Act (ADA) of 1990 which serves as the foundation for current legislation.</p> <p>You'll notice mention of \"risk compliance\" throughout this documentation.  This refers to the necessity that business and industry adhere to laws supporting accessiblity, such as the ADA, and the possible consequences, the risks, both legally and financially, if they don't.  ADA Requirements for Banks: 4 Facts You Might Not Know outlines some of the obligations that financial institutions, as an example, have under the ADA and outlines the realities of non-compliance.</p>"},{"location":"motivation/situation/#investing-in-design","title":"Investing in Design","text":"<p>As anyone in software development can tell you, failing to address accessibility compliance until the end of a development cycle is problematic at best.  Your product will benefit the most by planning for accessibility from the very beginning.  After planning is complete, the design phase of a project will begin.  A good design is rooted in a good design system (unsure of investing in a design system? Read about the ROI of a Design System).  The design system is where the look and feel of the application is defined and refined.  This is a natural location to build accomodations for people with visual impairments and this is where we are beginning our journey.</p>"},{"location":"motivation/situation/#our-conclusion","title":"Our Conclusion","text":"<p>While governments and businesses have embraced accessibility standards, the implementations are complex thereby yielding compliance challenges and shortcomings. However, the availability of a theme builder, which generates machine readable asset types to be used by design systems to publish products that are accessibly inclusive, could provide much needed assistance to designers, developers and testers. Such a tool could leverage a set of foundational services that can dynamically calculate accessibility constraints for a range of disabilities and disorders. The theme builder could systematically orchestrate, for a designer, the interrelationships between atomic design elements to yield design system themes that reduce accessibly inclusive complexities.</p>"},{"location":"motivation/solution/","title":"Solution","text":""},{"location":"motivation/solution/#unified-design","title":"Unified Design","text":"<p>Our desired solution is possible if we apply the concepts of a Unified Design system consisting of the following building blocks:</p> <p></p>"},{"location":"motivation/solution/#atomic-accessibility-design","title":"Atomic Accessibility Design","text":""},{"location":"motivation/solution/#inspiration","title":"Inspiration","text":"<p>Atomic Design is a methodology, developed by Brad Frost, for creating design systems.</p> <p>The methodology enables the creation of scalable systems, reusable components, and design systems. While originally associated with the design of web interfaces, this methodology can be applied to a wide array of design domains. There are five distinct levels in Atomic Design:</p> Component Description Atoms Atoms represent the smallest entity in UI elements and they can\u2019t be broken down any further. They serve as the foundational building blocks of your interface. Some examples are: colors, fonts, animations and single images. Molecules Molecules are groups of compound atoms. Molecules are associated with distinct properties and serve as the backbone of design systems. In the web arena, molecules depict simple UI elements functioning together as a unit. Some examples are: a form label, search input, and buttons. Organisms Organisms are groups of molecules and/or atoms joined together to form a relatively complex, distinct section of an interface.  Examples include: navigation, sidebars, forms, and popups. Templates Templates consist mostly of groups of organisms stitched together to define the structure (design) of possible pages. Templates are void of real content. Pages Pages are instances of templates that contain real content. Essentially, they combine all the components of a design coupled with real data. <p>Atomic Design provides a clear methodology for crafting design systems based on a series of related building blocks (design components).</p>"},{"location":"motivation/solution/#accessibility","title":"Accessibility","text":"<p>Web Accessibility (or e-Accessibility) pertains to the design of websites and mobile applications that do not present barriers of access to people needing accommodations. Yet the principles of inclusion that e-Accessibility attempts to address are not limited to digital interfaces. The broader challenge is to address the inaccessible use or access of instruments or interfaces in physical as well as digital environments in a common and consistent manner. The process of printing physical instruments (i.e.: menus, tickets, Credit cards, contracts, identity documents) requires the same a priori knowledge of impairment preferences as the process for rendering digital interfaces.</p> <p></p> <p>Given the challenges associated with risk compliance to support people needing accommodations (Visual, Motion, Motor, Auditory, Seizures, Cognitive/Learning), Atomic Design enables designers and developers to establish a round-trip workflow process that traverses from abstract concepts to concrete details. The application of Atomic Design concepts towards the development of accessibly compliant solutions can yield consistency and scalability while mitigating regulatory risk.</p> <p>An Atomic Accessibility Design Methodology extrapolates the concepts of atomic design to provide a general purpose approach to the systematic publishing/rendering of accessible content relating to physical and digital instruments.</p> Component Description Atoms Atoms represent micro-services associated with partial aspects of content publishing/rendering process. For example the handling of content attributes or elements. Molecules Molecules are groups of compound atoms. Molecules are associated with distinct properties and serve as the backbone of design systems. Molecules represent micro-services associated with the processing of groups of compound atoms.  For example the handling of content features. Organisms Organisms are macro-services that group together molecules and/or atoms to address disability/disorder specific needs.  Examples include dyslexia, motion sensitivity, color blindness. Themes Themes consist mostly of groups of organisms stitched together to define the structure (design) of yet-to-be published content types. Themes are void of real content. Instruments Digital or physical instances where content is printed/rendered using a theme and applying the the theme to real content. Essentially, they combine all the components of a design coupled with real data."},{"location":"motivation/solution/#scope","title":"Scope","text":"<p>An Atomic Accessibility Design Methodology is applicable to a range of disabilities and disorders that impact the experience individuals have when interacting with physical and digital content. </p> <p></p> <p>The list of such impairments include but is not limited to:</p> <ul> <li>Learning: Difficulty in one or more areas of learning</li> <li>Motion: Sensitivity to surroundings with visual motion or repetitive patterns</li> <li>Mobility: Difficulty walking or climbing stairs</li> <li>Cognition: Difficulty concentrating, remembering, or making decisions</li> <li>Independent Living: Difficulty doing errands alone</li> <li>Hearing: Difficulty hearing</li> <li>Vision: Difficulty seeing</li> <li>Self-care: Difficulty dressing or bathing</li> </ul>"},{"location":"motivation/solution/#theme-builder","title":"Theme Builder","text":"<p>The Theme Builder is a tool that combines brand design input + the structure of atomic design +  logic to generate accessible atoms and molecules.  The output from this tool has the ability to transform a robust, out of the box Design Library and a React Component Library into a Branded and accessible Unified Design System.</p>"},{"location":"motivation/solution/#conceptual-workflow","title":"Conceptual Workflow","text":"<p>For each of the following steps, a theme builder User may be a Designer or Person Needing Accommodations.</p> <ol> <li>User opens Theme Building Tool.</li> <li>User creates a new design system project within the Theme Building Tool.</li> <li>User configures project to produce themes that are either Business (AA) or Government (AAA) WCAG Compatible.</li> <li>User adds 10 shades of a color in light and dark mode with corresponding \"on color\" to the project.</li> <li> <p>User defines the base atoms for the theme. This lays the foundation for all light and dark mode calculations. The Theme Building Tool guides the User through the following steps that must occur in sequential order:</p> <ol> <li>Select Primary, Secondary, and Tertiary Colors</li> <li>Define light mode background and dark mode background.</li> <li>Define Gradient backgrounds, Buttons and Icons colors, and Gradient Text.</li> </ol> </li> <li> <p>User defines other atomic elements (atoms, molecules) that will be used by the theme. The Theme Building Tool guides the User through the following steps:</p> <ol> <li>Data independent preferences<ol> <li>Specify minimum desktop target area</li> <li>Specify grid system</li> <li>Specify animation settings</li> </ol> </li> <li>Data dependent preferences using decisions associated with Primary, Secondary, Tertiary, Light and Dark Mode background colors. These attribute values are calculated:<ol> <li>state colors</li> <li>Fonts / Typography</li> <li>Default Border Settings</li> <li>Elevations</li> <li>Bevels</li> <li>Chart colors</li> </ol> </li> </ol> </li> <li> <p>User applies atomic settings to molecules associated with the theme project.</p> </li> <li>User uses the Theme Building Tool to generate theme asset types (JSON, CSS, design tokens).</li> </ol>"},{"location":"motivation/solution/#systems-and-themes","title":"Systems and Themes","text":"<p>Theme builder distinguishes between system and theme atoms.  </p> <p></p> <p>Each theme is layered on top of the core design system.The default theme rendered is either desktop or mobile in light mode.  But additional themes can be layered to create endless additional experiences.</p> <p></p> <p>Additional theme layers can be applied by the user to generate themes that are effectively a combination of atomic layers. Initially, layering support is provided for the following accessibility preferences:</p> <ul> <li> <p>Dyslexic preferences</p> <ul> <li>This updates all the fonts to Open Dyslexic </li> <li>Increases line heights for improved readability for dyslexic end users</li> <li>(Future) Color contrast options</li> </ul> </li> <li> <p>Motion sensitivity preferences</p> <ul> <li>Removes animations from all components</li> </ul> </li> <li> <p>Color blind preferences</p> <ul> <li>Users can choose to adjust the colors of the branded components to colors that best accommodate their specific color perception deficiency Protanopia, Deuteranopia, and Tritanopia</li> <li>The updated colors meet the WCAG contrast guidelines and are non-jarring and visually pleasing</li> </ul> </li> </ul> <p>Themes can also be organized into different sub themes. For example, rendering experiences with different system color palette combinations.</p> <p></p> <p>To better understand the power of the Theme Builder, let us imagine we need to build an entire Design System to meet the legal requirements of WCAG AA guidelines (Enterprise Grade) and then find we need a WCGA AAA compliant (Government Grade) system for a government contract. </p> <p></p> <p>Typically, this would be very challenging. However, with the Theme Builder all we would need to do is:</p> <ol> <li>Duplicate our AA compliant design system</li> <li>Update one atomic property to switch the WCAG compliance setting from AA to AAA.<ul> <li>The atomic elements of new design system will be automatically updated:<ul> <li>Colors and contrast will be automatically updated to meet the elevated requirements</li> <li>Line heights updated</li> <li>Character spacing is updated</li> </ul> </li> </ul> </li> <li>Save the new Design System.</li> </ol> <p>Note: Coming soon.  The atomic property mentioned above is an enhancement that is yet to be implemented.  The WCAG AA and AAA compliance capabilities are already in place.</p>"},{"location":"motivation/solution/#designops-toolchain","title":"DesignOps Toolchain","text":"<p>A DesignOps Toolchain keeps the Design Component Library, the Digital Component Library and the CSS Library in sync. </p> <p>For example, assuming the use of Figma as prototyping tool, a Designer can push changes from the master Figma design library to a staging component library repo. </p> <p></p> <p>Alternatively, changes can also be pushed from the staging repo to Figma.  </p> <p></p> <p>Note: This only demonstrates the work flow not the approval processes.  This toolchain utilizes Figma Tokens, Figma, GitHub, a React Component Library and Chromatic (an enhanced, fee-based version of Storybook).</p>"},{"location":"motivation/theme-builder/","title":"Theme builder","text":""},{"location":"motivation/theme-builder/#theme-builder","title":"Theme Builder","text":"<p>The Theme Builder is a tool that combines brand design input + the structure of atomic design +  logic to generate accessible atoms and molecules to output code which transforms a robust, out of the box Design Library and a React Component Library into a Branded and accessible Unified Design System. </p>"},{"location":"motivation/theme-builder/#conceptual-workflow","title":"Conceptual Workflow","text":"<p>For each of the following steps, a theme builder User may be a Designer or Person Needing Accommodations.</p> <ol> <li>User opens Theme Building Tool.</li> <li>User creates a new design system project within the Theme Building Tool.</li> <li>User configures project to produce themes that are either Business (AA) or Government (AAA) WCAG Compatible.</li> <li>User adds 10 shades of a color in light and dark mode with corresponding \"on color\" to the project.</li> <li> <p>User defines the base atoms for the theme. This lays the foundation for all light and dark mode calculations. The Theme Building Tool guides the User through the following steps that must occur in sequential order:</p> </li> <li> <p>Select Primary, Secondary, and Tertiary Colors</p> </li> <li>Define Light mode background and dark mode background.</li> <li> <p>Define Gradient backgrounds, Buttons and Icons colors, and Gradient Text.</p> </li> <li> <p>User defines other atomic elements (atoms, molecules) that will be used by the theme. The Theme Building Tool guides the User through the following steps:</p> </li> <li> <p>Data independent preferences</p> <ol> <li>Specify minimum desktop target area</li> <li>Specify grid system</li> <li>Specify animation settings</li> </ol> </li> <li> <p>Data dependent preferences using decisions associated with Primary, Secondary, Tertiary, Light and Dark Mode background colors. These attribute values are calculated:</p> <ol> <li>state colors</li> <li>Fonts / Typography</li> <li>Default Border Settings</li> <li>Elevations</li> <li>Bevels</li> <li>Chart colors</li> </ol> </li> <li> <p>User applies atomic settings to molecules associated with the theme project.</p> </li> <li>User uses the Theme Building Tool to generate theme asset types (JSON, CSS, design tokens).</li> </ol>"},{"location":"motivation/toolchain/","title":"Toolchain","text":""},{"location":"motivation/toolchain/#design-ops-toolchain","title":"Design Ops Toolchain","text":"<p>A Design Ops Toolchain keeps the Design Component Library, the Digital Component Library and the CSS Library in sync. </p> <p>For example, assuming the use of Figma as prototyping tool, a Designer can push changes from the master Figma design library to a staging component library repo. </p> <p></p> <p>Alternatively, changes can also be pushed from the staging repo to Figma.  </p> <p></p> <p>Note: This only demonstrates the work flow not the approval processes.  This toolchain utilizes Figma Tokens, Figma, GitHub, a React Component Library and Chromatic (a paid and enhanced version of Storybook).</p>"},{"location":"references/","title":"References","text":""},{"location":"references/#understanding-accessibility","title":"Understanding Accessibility","text":"<ul> <li>Web Content Accessibility Guidelines (WCAG) 2.1</li> <li>Color Desaturation</li> <li>Color Blindness Simulator</li> <li>CDC Visual Disabilities</li> <li>WHO Visual Impairments</li> <li>Digital Inclusion</li> <li>Vestibular Disorders - Motion Sensitivity</li> <li>Designing for Reduced Motion</li> <li>Visual Fixations and Motion Sensitivity: Protocol for an Exploratory Study</li> <li>Learning Disorders in Children</li> <li>CDC Disability Impacts All of Us Infographic</li> </ul>"},{"location":"references/#accessibility-testing","title":"Accessibility Testing","text":"<ul> <li>AccessScan</li> <li>AudioEye</li> <li>Usability Geek Suggestions</li> <li>Must have test tools</li> <li>Deque</li> <li>Monsido</li> <li>Breakout Web ADA Scan</li> </ul>"},{"location":"references/#design","title":"Design","text":"<ul> <li>Atomic Design Concepts</li> <li>Atomic Design Review</li> </ul>"},{"location":"references/#development","title":"Development","text":"<ul> <li>Design System elements</li> <li>Mui Library</li> <li>W3C Accessibility</li> <li>A11Y Accessibility Resources</li> <li>WAI-ARIA - Accessible Rich Internet Applications</li> </ul>"},{"location":"setup/","title":"Getting Started","text":"<p>This section provides instructions for installing and running the Theme Builder application.</p> <p>There are two ways you can install and run Theme Builder, depending upon your objective.</p> <ol> <li>Quick and Easy: You will be running the Theme Builder application as a normal user.</li> <li>Javascript Runtime Environment: You are a developer that will be enhancing or extending the Theme Builder.</li> </ol>"},{"location":"setup/app-installation/","title":"Installation","text":"<p>Perform the following steps to run a local version of the Theme Builder application.  </p>"},{"location":"setup/app-installation/#fetch-latest-code","title":"Fetch Latest Code","text":"<p>These instructions assume you have a forked instance of finos/a11y-theme-builder in your personal GitHub account.</p> <pre><code>mkdir &lt;WORKSPACE&gt;\ncd &lt;WORKSPACE&gt;\ngit clone https://github.com/&lt;YOUR-ORG&gt;/a11y-theme-builder\ncd a11y-theme-builder\n</code></pre> <p>where:</p> <ul> <li><code>&lt;WORKSPACE&gt;</code> is the path to the local folder where you want to create a copy of the GitHub repository.</li> <li><code>&lt;YOUR-ORG&gt;</code> is the name of your GitHub account or personal GitHub organization.</li> </ul>"},{"location":"setup/app-installation/#quick-and-easy","title":"Quick and Easy","text":"<p>Building and running the Theme Builder application using <code>Docker</code> can be achieved in a few simple steps, which all assume <code>/code</code> as the working directory.</p> <pre><code>cd &lt;WORKSPACE&gt;/a11y-theme-builder/code\n</code></pre>"},{"location":"setup/app-installation/#build-theme-builder-docker-image","title":"Build Theme Builder Docker image","text":"<pre><code>docker build . -t a11y-theme-builder\n</code></pre>"},{"location":"setup/app-installation/#start-the-theme-builder-application-in-a-new-docker-container","title":"Start the Theme Builder application in a new Docker container","text":"<pre><code>docker run -p 8080:3001 --name a11y-theme-builder -d a11y-theme-builder\n</code></pre>"},{"location":"setup/app-installation/#view-the-theme-builder-application-in-your-browser","title":"View the Theme Builder application in your browser","text":"<p>To access the running Theme Builder application, load the following URL into a browser:</p> <pre><code>http://localhost:8080\n</code></pre>"},{"location":"setup/app-installation/#remove-the-stopped-application-build-image","title":"Remove the stopped Application build image","text":"<p>To remove the Theme Builder Docker image from your system run the following command.  </p> <p>Note that the application container must be stopped and removed before the image can be removed.  Once the image is removed, you won't be able to run the Theme Builder application unless you build the Docker image again.</p> <pre><code>docker rmi a11y-theme-builder\n</code></pre>"},{"location":"setup/app-installation/#javascript-runtime-environment","title":"Javascript Runtime Environment","text":"<p>The following commands will build and run the Theme Builder application using a local Node.js environment running on a Linux distribution such as MacOS:</p>"},{"location":"setup/app-installation/#build-the-theme-builder-application","title":"Build the Theme Builder application","text":"<pre><code>cd &lt;WORKSPACE&gt;/a11y-theme-builder/code\nnpm run build\n</code></pre>"},{"location":"setup/app-installation/#run-the-theme-builder-application","title":"Run the Theme Builder application","text":"<pre><code>npm run debug\n</code></pre>"},{"location":"setup/app-installation/#view-the-theme-builder-application-in-your-browser_1","title":"View the Theme Builder application in your browser","text":"<p>To access the Theme Builder application, load the following URL into a browser:</p> <pre><code>http://localhost:3001\n</code></pre>"},{"location":"setup/app-installation/#windows-specific-steps","title":"Windows Specific Steps","text":"<p>Currently, there are a few extra steps to use the app on a Windows system:</p> <ul> <li>delete both <code>package-lock.json</code> files before build<ul> <li><code>&lt;WORKSPACE&gt;/a11y-theme-builder/code/package-lock.json</code></li> <li><code>&lt;WORKSPACE&gt;/a11y-theme-builder/code/src/ui/package-lock.json</code></li> </ul> </li> <li>replace <code>'</code> chars in the debug script in the package.json with <code>\\\"</code>, so that it reads  <pre><code>\"debug\": \"nodemon --exec \\\"ts-node\\\" src/app.ts\",\n</code></pre></li> <li>delete the <code>data/themes</code> file, before running the application<ul> <li><code>&lt;WORKSPACE&gt;/a11y-theme-builder/code/src/data/themes</code></li> </ul> </li> </ul>"},{"location":"setup/dependencies/","title":"Prerequisites","text":"<p>The Theme Builder application can be built and run locally using two variations (Quick and Easy, Javascript Runtime Environment) that differ on complexity of setup.</p>"},{"location":"setup/dependencies/#basic-requirements","title":"Basic Requirements","text":"<ul> <li>Install git</li> <li>Learn how to fork and clone GitHub repositories.</li> </ul>"},{"location":"setup/dependencies/#quick-and-easy","title":"Quick and Easy","text":"<p>If you simply desire to run the application and do not need to perform any development enhancements, the easiest approach for running the application locally is to install Docker Desktop.</p>"},{"location":"setup/dependencies/#javascript-runtime-environment","title":"Javascript Runtime Environment","text":"<p>If you desire to extend or enhance the application, a local development environment will need to be configured. This requires the installation of Node.js prerequisites, specifically</p> <ul> <li>NodeJS 16+</li> <li>npm 8+</li> </ul> <p>Visit Node.js downloads for latest versions.</p>"},{"location":"setup/dependencies/#targeted-browsers","title":"Targeted Browsers","text":"<p>We are targeting the following browser versions:</p> <ul> <li>Chrome v109+</li> <li>Safari v15.6+</li> <li>Edge v110+</li> <li>Firefox v111+</li> </ul> <p>This list consists of reasonably recent versions that are most likely to be in use by designers and developers.  We would welcome any input from enterprise-type users to help improve this list.</p>"},{"location":"setup/start-builder/","title":"Running Theme Builder","text":"<p>After Theme Builder is installed on your local system, you can run the application for the type of installation:</p> <ol> <li>Quick and Easy</li> <li>Javascript Runtime Environment</li> </ol>"},{"location":"setup/start-builder/#quick-and-easy","title":"Quick and Easy","text":"<p>After building the Theme Builder's <code>Docker</code> image <code>a11y-theme-builder</code>, it can be run and managed.</p>"},{"location":"setup/start-builder/#start-the-theme-builder-application-in-a-new-docker-container","title":"Start the Theme Builder application in a new Docker container","text":"<pre><code>docker run -p 8080:3001 --name a11y-theme-builder -d a11y-theme-builder\n</code></pre>"},{"location":"setup/start-builder/#view-the-theme-builder-application-in-your-browser","title":"View the Theme Builder application in your browser","text":"<p>To access the running Theme Builder application, load the following URL into a browser:</p> <pre><code>http://localhost:8080\n</code></pre>"},{"location":"setup/start-builder/#docker-commands-to-manage-the-theme-builder-application","title":"Docker commands to manage the Theme Builder Application","text":"<p>The following commands can be used to manage the Theme Builder application built and running with <code>Docker</code>.</p>"},{"location":"setup/start-builder/#stop-theme-builder-application","title":"Stop Theme Builder application","text":"<p>This stops the Theme Builder application, but does not delete it.  All saved theme data is preserved.</p> <pre><code>docker stop a11y-theme-builder\n</code></pre>"},{"location":"setup/start-builder/#start-a-stopped-theme-builder-application","title":"Start a stopped Theme Builder application","text":"<p>This starts a stopped Theme Builder application.  Any saved theme data will be retained.</p> <pre><code>docker start a11y-theme-builder\n</code></pre>"},{"location":"setup/start-builder/#remove-a-stopped-theme-builder-application","title":"Remove a stopped Theme Builder application","text":"<p>This removes a stopped Theme Builder application and any saved theme data will be deleted.</p> <pre><code>docker rm a11y-theme-builder\n</code></pre>"},{"location":"setup/start-builder/#advanced-docker-environment","title":"Advanced Docker Environment","text":"<p>The theme data is stored in an embedded database.  As a result, when the Docker container is removed any saved theme data will be deleted.</p> <p>To prevent theme data from being deleted, you can specify a local directory on your system where this data will be saved.  This is done by using the <code>-v</code> option when starting Docker and passing in the path to a local directory. </p>"},{"location":"setup/start-builder/#start-the-theme-builder-application-to-keep-theme-data","title":"Start the Theme Builder application to keep theme data","text":"<p>The following command uses your current directory to save the theme data.  If you want to use a different directory, replace <code>${pwd}</code> with the new directory name.  Note that this directory name can't be a relative directory, but must be an absolute directory path. <pre><code>docker run -p 8080:3001 -v ${pwd}:/code/src/data --name a11y-theme-builder -d a11y-theme-builder\n</code></pre></p>"},{"location":"setup/start-builder/#javascript-runtime-environment","title":"Javascript Runtime Environment","text":"<p>The following commands will build and run the Theme Builder application using a local Node.js environment running on a Linux distribution such as MacOS:</p> <pre><code>cd a11y-theme-builder/code\nnpm run build\nnpm run debug\n</code></pre> <p>To access the Theme Builder application, load the following URL into a browser:</p> <pre><code>http://localhost:3001\n</code></pre>"},{"location":"setup/start-builder/#development","title":"Development","text":"<p>The Theme Builder is a web application that uses Node for the server and React for the UI.  Both server and UI use typescript, which is compiled into javascript and saved in the build directories:</p> Directory Description code/build Server JS code/src/ui/build UI React JS <p>The command <code>npm run build</code> builds both the server and UI.  To build just the server, run</p> <pre><code>npm run build-api\n</code></pre> <p>or to build the UI, run</p> <pre><code>npm run build-ui\n</code></pre> <p>To simplify developing of the UI, the React Development Server can be run</p> <pre><code>npm run dev-ui\n</code></pre> <p>To access the Theme Builder application through the React Development Server, load the following URL into a browser:</p> <pre><code>http://localhost:3000\n</code></pre> <p></p> <p>Any changes made to the React source code will automatically be picked up by the server and updated in the browser on port 3000.  </p> <p>Note that the build directory is not updated with these changes until an <code>npm run build</code> or <code>npm run build-ui</code> is performed.</p>"},{"location":"setup/start-builder/#potential-windows-issue","title":"Potential Windows Issue","text":"<p>One problem you might run into on a Windows system is that themes may not appear, load, or be created. If this is the case, it most likely means there is a problem with your themes file, which acts as the database where themes are persisted. The most common explanation is that your environment has automatically changed the line endings of this file to <code>CRLF</code>. To fix this, either use your editor to change the line endings to <code>LF</code>, or better, follow this guide to ensure git does not do this in the future by running the command <code>git config --global core.autocrlf false</code>, and resetting the repo.</p>"}]}