echo "[Husky] Checking for ESLint errors and formatting using Prettier."

# Navigate to the code directory
cd code 

UPSTREAM=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)

if [ -n "$UPSTREAM" ]; then
    # If upstream exists, find changed files since the common ancestor with upstream
    CHANGED_FILES=$(git diff --name-only $(git merge-base HEAD "$UPSTREAM")..HEAD | sed 's/^code\///' | grep -E '\.(js|jsx|ts|tsx|css|scss|json|md)$')
else
    # If no upstream exists, find changed files since the last push
    CHANGED_FILES=$(git diff --name-only HEAD@{push}..HEAD | sed 's/^code\///' | grep -E '\.(js|jsx|ts|tsx|css|scss|json|md)$')
fi

# Run ESLint on changed files
if [ -n "$CHANGED_FILES" ]; then
  echo "Running ESLint..."
  npx eslint $CHANGED_FILES
  if [ $? -ne 0 ]; then
    echo "ESLint found issues. Aborting push."
    exit 1
  fi
else
  echo "No JavaScript/TypeScript files to lint."
fi

# Format the changed files using Prettier
if [ -n "$CHANGED_FILES" ]; then
  echo "Running Prettier..."
  npx prettier --write $CHANGED_FILES
  git add $CHANGED_FILES
else
  echo "No files to format."
fi

# Check if there are any staged changes
STAGED_FILES=$(git diff --cached --name-only)
if [ -n "$STAGED_FILES" ]; then
  echo "Committing changes..."
  git commit -m "[Husky] Pre-push hook checked for eslint errors and formatted the code which is committed to this repo  "
else
  echo "No changes to commit."
fi

